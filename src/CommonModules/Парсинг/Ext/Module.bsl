//*****************************************************************************************
Функция ВыполнитьПарсинг(Текст) Экспорт
	
	Текст = СтрЗаменить(Текст, Символы.ПС, "");
	Текст = СтрЗаменить(Текст, "},", "<_>");
	Текст = СтрЗаменить(Текст, "{", "{"""":");
	Текст = СтрЗаменить(Текст, ",", ", """":");
	Текст = СтрЗаменить(Текст, "<_>", "},");
	
	Для А = 1 По 20 Цикл
		
		Текст = СтрЗаменить(Текст, "}}", "}]}");
		
	КонецЦикла;
	
	Текст = СтрЗаменить(Текст, ":{", ":[{");
	
	Текст = СтрЗаменить(Текст, "{"""":""Cmd""", "{""Cmd"":""Cmd""");
	Текст = СтрЗаменить(Текст, "{"""":""Const""", "{""Const"":""Const""");
	Текст = СтрЗаменить(Текст, "{"""":""Var""", "{""Var"":""Var""");
	Текст = СтрЗаменить(Текст, "{"""":""Lbl""", "{""Lbl"":""Lbl""");
	Текст = СтрЗаменить(Текст, "{"""":""Proc""", "{""Proc"":""Proc""");
	Текст = СтрЗаменить(Текст, "{"""":""DefPrm""", "{""DefPrm"":""DefPrm""");
	
	Текст = СтрЗаменить(Текст, "{"""":""DefPrm""", "{""DefPrm"":""DefPrm""");
	Текст = СтрЗаменить(Текст, """"":[{", """values"":[{");
	
	Текст = СтрЗаменить(Текст, "{""Cmd"":""Cmd"", """":", "{""Cmd"":""Cmd"", ""lenght"":");
	Текст = СтрЗаменить(Текст, "{""Const"":""Const"", """":", "{""Const"":""Const"", ""count"":");
	Текст = СтрЗаменить(Текст, "{""Var"":""Var"", """":", "{""Var"":""Var"", ""count"":");
	Текст = СтрЗаменить(Текст, "{""Lbl"":""Lbl"", """":", "{""Lbl"":""Lbl"", ""count"":");
	Текст = СтрЗаменить(Текст, "{""Proc"":""Proc"", """":", "{""Proc"":""Proc"", ""count"":");
	Текст = СтрЗаменить(Текст, "{""DefPrm"":""DefPrm"", """":", "{""DefPrm"":""DefPrm"", ""count"":");
	
	Текст = СтрЗаменить(Текст, "", "");
	
	Текст = СтрЗаменить(Текст, "{"""":1, ""values"":[{", "{""_%version%_"":1, ""values"":[{");
	
	Текст = СтрЗаменить(Текст, ":[", ":[" + Символы.ПС);
	Текст = СтрЗаменить(Текст, "},", "}," + Символы.ПС);
	
	JSON = "";
	
	Идентификатор = 0;
	
	Раздел = Неопределено;
	
	Для А = 1 По СтрЧислоСтрок(Текст) Цикл
		
		ТекущаяСтрока = СтрПолучитьСтроку(Текст, А);
		
		Если СтрЧислоВхождений(ТекущаяСтрока, "Cmd") > 0 Тогда
			
			ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока, """"":", """entryPoint"":");
			
			Раздел = "Cmd";
			
		КонецЕсли;
		
		Если СтрЧислоВхождений(ТекущаяСтрока, "Const") > 0 Тогда
			
			Раздел = "Const";
			
		КонецЕсли;
		
		Если СтрЧислоВхождений(ТекущаяСтрока, "Lbl") > 0 Тогда
			
			Раздел = "Lbl";
			
		КонецЕсли;
		
		Если СтрЧислоВхождений(ТекущаяСтрока, "DefPrm") > 0 Тогда
			
			Раздел = "DefPrm";
			
		КонецЕсли;
		
		Значения = Новый Массив;
		
		Пока Истина Цикл
			
			ЧислоВхождений = СтрЧислоВхождений(СтрЗаменить(ТекущаяСтрока, "},", "}"), ",");
			
			Если ЧислоВхождений = 1 Тогда
				
				Если Раздел = "Cmd" Тогда
					
					Значения.Добавить("opCode");
					Значения.Добавить("operand");
					
				ИначеЕсли Раздел = "Const" Тогда
					
					Значения.Добавить("type");
					Значения.Добавить("value");
					
				ИначеЕсли Раздел = "Lbl" Тогда
					
					Значения.Добавить("name");
					Значения.Добавить("address");
					
				ИначеЕсли Раздел = "DefPrm" Тогда
					
					Значения.Добавить("type");
					Значения.Добавить("value");
					
				КонецЕсли;
				
			ИначеЕсли ЧислоВхождений = 2 Тогда
				
				Значения.Добавить("name");
				Значения.Добавить("type");
				Значения.Добавить("view");
				
			ИначеЕсли ЧислоВхождений = 3 ИЛИ ЧислоВхождений = 4 Тогда
				
				Значения.Добавить("name");
				Значения.Добавить("view");
				Значения.Добавить("parametrs");
				Значения.Добавить("address");
				
			КонецЕсли;
			
			Если СтрЧислоВхождений(ТекущаяСтрока, ":") = 1 Тогда
				
				ЧислоВхождений = 1;
				
				Значения.Добавить("value");
				
			КонецЕсли;
			
			Если ЧислоВхождений > 0 Тогда
				
				Для Позиция = 0 По ЧислоВхождений Цикл
					
					ТекущаяПозиция = Найти(ТекущаяСтрока, """"":");
					
					Если ТекущаяПозиция = 0 Тогда 
						
						Прервать;
						
					КонецЕсли;
					
					ВременнаяСтрока = ТекущаяСтрока;
					
					ТекущаяСтрока = Лев(ВременнаяСтрока, ТекущаяПозиция);
					
					ТекущаяСтрока = ТекущаяСтрока + Значения[Позиция] + Сред(ВременнаяСтрока, ТекущаяПозиция + 1);
					
				КонецЦикла;
				
			КонецЕсли;
			
			ТекущаяПозиция = Найти(ТекущаяСтрока, """"":");
			
			Если ТекущаяПозиция = 0 Тогда 
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;	
		
		JSON = JSON + ТекущаяСтрока;
		
	КонецЦикла;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	
	ЧтениеJSON.УстановитьСтроку(JSON);
	
	ДанныеJSON = ПрочитатьJSON(ЧтениеJSON, Истина);
	
	ЧтениеJSON.Закрыть();
	
	Возврат ДанныеJSON; 
	
КонецФункции
//*****************************************************************************************
Функция ОбработатьФайлНаСервере(Проект, Каталог, Файл, Данные) Экспорт 
	
	МассивАдресов = Новый Массив;
	
	ПрефиксМеток			 = ?(ЗначениеЗаполнено(Проект.ПрефиксМеток), СокрЛП(Проект.ПрефиксМеток), "");
	ПрефиксПеременных		 = ?(ЗначениеЗаполнено(Проект.ПрефиксПеременных), СокрЛП(Проект.ПрефиксПеременных), "");
	ПрефиксПроцедурФункций	 = ?(ЗначениеЗаполнено(Проект.ПрефиксПроцедурФункций), СокрЛП(Проект.ПрефиксПроцедурФункций), "");

	Если Данные <> Неопределено Тогда
		
		Если Данные["_%version%_"] <> 1 Тогда
			
			Возврат - 1;
			
		КонецЕсли;
		
		ТочкиРазделов = Новый Соответствие;
		
		Для А = 0 По Данные["values"].Количество() - 1 Цикл
			
			Если Данные["values"][А].Получить("Cmd") <> Неопределено Тогда 
				
				ТочкиРазделов.Вставить("Cmd", А);
				
			ИначеЕсли Данные["values"][А].Получить("Const") <> Неопределено Тогда
				
				ТочкиРазделов.Вставить("Const", А);
				
			ИначеЕсли Данные["values"][А].Получить("Var") <> Неопределено Тогда
				
				ТочкиРазделов.Вставить("Var", А);
				
			ИначеЕсли Данные["values"][А].Получить("Lbl") <> Неопределено Тогда
				
				ТочкиРазделов.Вставить("Lbl", А);
				
			ИначеЕсли Данные["values"][А].Получить("Proc") <> Неопределено Тогда
				
				ТочкиРазделов.Вставить("Proc", А);
				
			КонецЕсли;
			
		КонецЦикла;  
		
		Для А = 0 По Данные["values"][ТочкиРазделов.Получить("Const")]["values"].Количество() - 1 Цикл
			
			Переменная = Данные["values"][ТочкиРазделов.Получить("Const")]["values"][А];
			
			Если НЕ ЕстьЗначениеВПамяти(Строка(А + 1), Перечисления.ТипЗначенияПамяти.Константа) Тогда 
				
				Memory = РегистрыСведений.Memory.СоздатьМенеджерЗаписи(); 
				
				Memory.Тип			 = Перечисления.ТипЗначенияПамяти.Константа;
				Memory.Вид			 = Переменная.Получить("type"); 
				Memory.Файл			 = Файл; 
				Memory.Адрес		 = Новый УникальныйИдентификатор(); 
				Memory.Проект		 = Проект.Ссылка; 
				Memory.Строка		 = А + 1; 
				Memory.Отладка		 = Новый ХранилищеЗначения(Неопределено);   
				Memory.Значение		 = Новый ХранилищеЗначения(Переменная.Получить("value"));
				Memory.Наименование	 = Строка(А + 1); 
				
				Memory.Записать();
				
			КонецЕсли;
			
		КонецЦикла;  
		
		Для А = 0 По Данные["values"][ТочкиРазделов.Получить("Var")]["values"].Количество() - 1 Цикл
			
			Переменная = Данные["values"][ТочкиРазделов.Получить("Var")]["values"][А];
			
			Если НЕ ЕстьЗначениеВПамяти(ПрефиксПеременных + Переменная.Получить("name"), Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная) Тогда 
				
				Адрес = Новый УникальныйИдентификатор(); 
				
				Memory = РегистрыСведений.Memory.СоздатьМенеджерЗаписи(); 
				
				Memory.Тип			 = Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная;
				Memory.Файл			 = Файл; 
				Memory.Адрес		 = Адрес; 
				Memory.Строка		 = 0; 
				Memory.Проект		 = Проект.Ссылка; 
				Memory.Отладка		 = Новый ХранилищеЗначения(Неопределено);   
				Memory.Значение		 = Новый ХранилищеЗначения(Неопределено);
				Memory.Наименование	 = ПрефиксПеременных + Переменная.Получить("name"); 
				
				Memory.Записать();
				
				МассивАдресов.Добавить(Адрес);
				
			КонецЕсли;
			
		КонецЦикла;   
		
		Если ТочкиРазделов.Получить("Lbl") <> Неопределено Тогда 	

			Для А = 0 По Данные["values"][ТочкиРазделов.Получить("Lbl")]["values"].Количество() - 1 Цикл
				
				Метка = Данные["values"][ТочкиРазделов.Получить("Lbl")]["values"][А];
				
				Label = РегистрыСведений.Labels.СоздатьМенеджерЗаписи(); 
				
				Label.Тип			 = Перечисления.ТипМетки.Глобальная;
				Label.Файл			 = Файл; 
				Label.Проект		 = Проект.Ссылка; 
				Label.Строка		 = А + 1; 
				Label.Значение		 = Метка["address"]; 
				Label.Наименование	 = ПрефиксМеток + Метка["name"]; 
				
				Label.Записать();
				
			КонецЦикла;
			
		КонецЕсли;

		Для А = 0 По Данные["values"][ТочкиРазделов.Получить("Proc")]["values"].Количество() - 1 Цикл   
			
			КоличествоПараметров		 = Данные["values"][ТочкиРазделов.Получить("Proc")]["values"][А]["parametrs"];
			АдресПроцедурыФункции		 = Данные["values"][ТочкиРазделов.Получить("Proc")]["values"][А]["address"];
			НаименованиеПроцедурыФункции = Данные["values"][ТочкиРазделов.Получить("Proc")]["values"][А]["name"];  
			
			ПараметрыФункции = Новый Массив;     

			Если Данные["values"][ТочкиРазделов.Получить("Proc")]["values"][А].Получить("values") <> Неопределено Тогда  
				
				Для Б = 0 По Данные["values"][ТочкиРазделов.Получить("Proc")]["values"][А].Получить("values").Количество() - 1 Цикл
					
					Если Данные["values"][ТочкиРазделов.Получить("Proc")]["values"][А]["values"][Б].Получить("Var") <> Неопределено Тогда
						
						КоличествоПеременных = Данные["values"][ТочкиРазделов.Получить("Proc")]["values"][А]["values"][Б]["values"].Количество();    
						
						Если КоличествоПеременных > 0 Тогда
							
							Для В = 0 По Данные["values"][ТочкиРазделов.Получить("Proc")]["values"][А]["values"][Б]["values"].Количество() - 1 Цикл
								
								Переменная = Данные["values"][ТочкиРазделов.Получить("Proc")]["values"][А]["values"][Б]["values"][В];
								
								Если НЕ ЕстьЗначениеВПамяти(ПрефиксПеременных + Переменная.Получить("name"), Перечисления.ТипЗначенияПамяти.ЛокальнаяПеременная) Тогда 
									
									Адрес = Новый УникальныйИдентификатор();
									
									Memory = РегистрыСведений.Memory.СоздатьМенеджерЗаписи(); 
									
									Memory.Файл			 = Файл; 
									Memory.Тип			 = Перечисления.ТипЗначенияПамяти.ЛокальнаяПеременная;
									Memory.Адрес		 = Адрес; 
									Memory.Строка		 = 0; 
									Memory.Проект		 = Проект.Ссылка; 
									Memory.Отладка		 = Новый ХранилищеЗначения(Неопределено);   
									Memory.Значение		 = Новый ХранилищеЗначения(Неопределено);
									Memory.Наименование	 = ПрефиксПеременных + Переменная.Получить("name"); 
									
									Memory.Записать(); 
									
									ЗначенияПроцедурФункций = РегистрыСведений.ЗначенияПроцедурФункций.СоздатьМенеджерЗаписи(); 
									
									ЗначенияПроцедурФункций.Тип			 = Перечисления.ТипЗначенияПроцедурыФункции.Var;
									ЗначенияПроцедурФункций.Файл		 = Файл; 
									ЗначенияПроцедурФункций.Адрес		 = АдресПроцедурыФункции; 
									ЗначенияПроцедурФункций.Номер		 = В;  
									ЗначенияПроцедурФункций.Проект		 = Проект.Ссылка; 
									ЗначенияПроцедурФункций.Значение	 = ПрефиксПеременных + Переменная.Получить("name");  
									
									ЗначенияПроцедурФункций.Записать(); 
									
									Если Переменная.Получить("type") = 5 Тогда
										
										ПараметрыФункции.Добавить(ПрефиксПеременных + Переменная.Получить("name"));
										
									ИначеЕсли Переменная.Получить("type") = 13 Тогда
										
										ПараметрыФункции.Добавить("Знач " + ПрефиксПеременных + Переменная.Получить("name"));
										
									КонецЕсли;
									
								КонецЕсли;
								
							КонецЦикла; 
							
						КонецЕсли;
						
					КонецЕсли;  
					
					Если Данные["values"][ТочкиРазделов.Получить("Proc")]["values"][А]["values"][Б].Получить("Lbl") <> Неопределено Тогда
						
						КоличествоМеток = Данные["values"][ТочкиРазделов.Получить("Proc")]["values"][А]["values"][Б]["values"].Количество(); 
						
						Если КоличествоМеток > 0 Тогда
							
							Для В = 0 По Данные["values"][ТочкиРазделов.Получить("Proc")]["values"][А]["values"][Б]["values"].Количество() - 1 Цикл
								
								Метка = Данные["values"][ТочкиРазделов.Получить("Proc")]["values"][А]["values"][Б]["values"][В];

								ЗначенияПроцедурФункций = РегистрыСведений.ЗначенияПроцедурФункций.СоздатьМенеджерЗаписи(); 
								
								ЗначенияПроцедурФункций.Тип				 = Перечисления.ТипЗначенияПроцедурыФункции.Lbl;
								ЗначенияПроцедурФункций.Файл			 = Файл; 
								ЗначенияПроцедурФункций.Адрес			 = АдресПроцедурыФункции; 
								ЗначенияПроцедурФункций.Номер			 = В;
								ЗначенияПроцедурФункций.Проект			 = Проект.Ссылка; 
								ЗначенияПроцедурФункций.Значение		 = Метка["address"];
								ЗначенияПроцедурФункций.Наименование	 = ПрефиксМеток + Строка(Метка["name"]); 
								
								ЗначенияПроцедурФункций.Записать(); 	
								
							КонецЦикла; 
							
						КонецЕсли;
						
					КонецЕсли;  
					
					Если Данные["values"][ТочкиРазделов.Получить("Proc")]["values"][А]["values"][Б].Получить("DefPrm") <> Неопределено Тогда
						
						КоличествоМеток = Данные["values"][ТочкиРазделов.Получить("Proc")]["values"][А]["values"][Б]["values"].Количество(); 
						
						Если КоличествоМеток > 0 Тогда
							
							Для В = 0 По Данные["values"][ТочкиРазделов.Получить("Proc")]["values"][А]["values"][Б]["values"].Количество() - 1 Цикл
								
								ЗначенияПоУмолчанию = Данные["values"][ТочкиРазделов.Получить("Proc")]["values"][А]["values"][Б]["values"][В];
								
								Если ЗначенияПоУмолчанию["type"] = "S" И ЗначенияПоУмолчанию["value"] <> "" Тогда
									
									ПараметрыФункции[В] = ПараметрыФункции[В] + " = """ + ЗначенияПоУмолчанию["value"] + """"; 
									
								ИначеЕсли ЗначенияПоУмолчанию["type"] = "N" И ЗначенияПоУмолчанию["value"] <> "-1" Тогда
									
									ПараметрыФункции[В] = ПараметрыФункции[В] + " = " + ЗначенияПоУмолчанию["value"]; 
									
								ИначеЕсли ЗначенияПоУмолчанию["type"] = "D" И ЗначенияПоУмолчанию["value"] <> "-1" Тогда
									
									ПараметрыФункции[В] = ПараметрыФункции[В] + " = " + ЗначенияПоУмолчанию["value"]; 
									
								ИначеЕсли ЗначенияПоУмолчанию["type"] = "B" И ЗначенияПоУмолчанию["value"] <> "" Тогда  
									
									Если ЗначенияПоУмолчанию["value"] = 1 Тогда 
										
										ПараметрыФункции[В] = ПараметрыФункции[В] + " = Истина"; 
										
									ИначеЕсли ЗначенияПоУмолчанию["value"] = 0 Тогда
										
										ПараметрыФункции[В] = ПараметрыФункции[В] + " = Ложь"; 
										
									КонецЕсли;
									
								ИначеЕсли ЗначенияПоУмолчанию["type"] = "U" Тогда
									                                                
									ПараметрыФункции[В] = ПараметрыФункции[В] + " = Неопределено"; 
									
								КонецЕсли;
								
							КонецЦикла; 
							
						КонецЕсли;
						
					КонецЕсли;  
					
				КонецЦикла;
				
			КонецЕсли;  

			Вид = Данные["values"][ТочкиРазделов.Получить("Proc")]["values"][А]["view"];                			

			ПроцедурыФункции = РегистрыСведений.ПроцедурыФункции.СоздатьМенеджерЗаписи(); 
			
			ПроцедурыФункции.Тип			 = Вид; 
			ПроцедурыФункции.Файл			 = Файл; 
			ПроцедурыФункции.Адрес			 = АдресПроцедурыФункции; 
			ПроцедурыФункции.Номер			 = А; 
			ПроцедурыФункции.Проект			 = Проект.Ссылка; 
			ПроцедурыФункции.Наименование	 = ПрефиксПроцедурФункций + НаименованиеПроцедурыФункции;
			
			ПараметрыФункцииПроцедуры = "";	 
			
			Для Г = 0 По ПараметрыФункции.Количество() - 1 Цикл
				
				ПараметрыФункцииПроцедуры = ПараметрыФункцииПроцедуры + СокрЛП(ПараметрыФункции[Г]) +  ", ";
				
			КонецЦикла;
			
			ПроцедурыФункции.Параметры = Лев(ПараметрыФункцииПроцедуры, СтрДлина(ПараметрыФункцииПроцедуры) - 2); 
		
			Если Вид = 0 Тогда

				ПроцедурыФункции.Экспортная		 = Ложь; 
				ПроцедурыФункции.ЭтоФункция		 = Ложь; 
				ПроцедурыФункции.ЭтоПроцедура	 = Истина; 
				
			ИначеЕсли Вид = 1 Тогда

				ПроцедурыФункции.Экспортная		 = Ложь; 
				ПроцедурыФункции.ЭтоФункция		 = Истина; 
				ПроцедурыФункции.ЭтоПроцедура	 = Ложь; 
				
			ИначеЕсли Вид = 16 Тогда

				ПроцедурыФункции.Экспортная		 = Истина; 
				ПроцедурыФункции.ЭтоФункция		 = Ложь; 
				ПроцедурыФункции.ЭтоПроцедура	 = Истина; 
				
			ИначеЕсли Вид = 17 Тогда

				ПроцедурыФункции.Экспортная		 = Истина; 
				ПроцедурыФункции.ЭтоФункция		 = Истина; 
				ПроцедурыФункции.ЭтоПроцедура	 = Ложь; 

			КонецЕсли;
			
			ПроцедурыФункции.Записать();  
			
			ФункцииПроцедурыСтрока = Проект.ФункцииПроцедуры.Добавить();
			
			ФункцииПроцедурыСтрока.Тип			 = ПроцедурыФункции.Тип; 
			ФункцииПроцедурыСтрока.Файл			 = Файл; 
			ФункцииПроцедурыСтрока.Адрес		 = АдресПроцедурыФункции; 
			ФункцииПроцедурыСтрока.Номер		 = ПроцедурыФункции.Номер; 
			ФункцииПроцедурыСтрока.Экспортная	 = ПроцедурыФункции.Экспортная; 
			ФункцииПроцедурыСтрока.ЭтоФункция	 = ПроцедурыФункции.ЭтоФункция; 
			ФункцииПроцедурыСтрока.ЭтоПроцедура	 = ПроцедурыФункции.ЭтоПроцедура; 
			ФункцииПроцедурыСтрока.Наименование	 = ПроцедурыФункции.Наименование;

		КонецЦикла;
		
		ТочкаВхода = -1;
		
		ТочкаРаздела = ТочкиРазделов.Получить("Cmd");
		
		Если ТочкаРаздела <> Неопределено Тогда
			
			ТочкаВхода = Данные["values"][ТочкаРаздела]["entryPoint"]; 
			
			Для А = 0 По Данные["values"][ТочкаРаздела]["values"].Количество() - 1 Цикл 
				
				Значение = Данные["values"][ТочкаРаздела]["values"][А];
				
				Code = РегистрыСведений.Code.СоздатьМенеджерЗаписи(); 
				
				Code.Файл	 = Файл; 
				Code.Проект	 = Проект.Ссылка; 
				Code.Строка	 = А + 1; 
				Code.opCode	 = Значение["opCode"]; 
				Code.Operand = Значение["operand"]; 
				
				Если Значение["opCode"] = 2 Тогда 
					
					Code.Адрес = МассивАдресов[Значение["operand"]];  
					
				ИначеЕсли   
					
					Значение["opCode"] = 4 
					ИЛИ Значение["opCode"] = 12 
					ИЛИ Значение["opCode"] = 20 
					ИЛИ Значение["opCode"] = 21 
					ИЛИ Значение["opCode"] = 51  
					
					Тогда    
					
					Запрос = Новый Запрос("ВЫБРАТЬ
					|	Memory.Адрес КАК Адрес
					|ИЗ
					|	РегистрСведений.Memory КАК Memory
					|ГДЕ
					|	Memory.Строка = &Строка
					|	И Memory.Тип = &Тип
					|	И Memory.Проект = &Проект
					|	И Memory.Файл = &Файл");
					
					Запрос.УстановитьПараметр("Тип",	 Перечисления.ТипЗначенияПамяти.Константа);
					Запрос.УстановитьПараметр("Файл",	 Файл);
					Запрос.УстановитьПараметр("Проект",	 Проект.Ссылка);
					Запрос.УстановитьПараметр("Строка",	 Значение["operand"] + 1);
					
					Выборка = Запрос.Выполнить().Выбрать();
					
					Пока Выборка.Следующий() Цикл 
						
						Code.Адрес = Выборка.Адрес;    
						
					КонецЦикла;
					
				КонецЕсли;
				
				Code.Записать();
				
			КонецЦикла;
			
		КонецЕсли; 
		
	КонецЕсли;
	
	НоваяСтрока = Проект.Файлы.Добавить();
	
	НоваяСтрока.Путь		 = СтрЗаменить(Файл, Каталог, ""); 
	НоваяСтрока.Text		 = ""; 
	НоваяСтрока.ТочкаВхода	 = ТочкаВхода; 
	НоваяСтрока.Наименование = Файл; 

	Возврат ТочкаВхода;
	
КонецФункции
//*****************************************************************************************
Функция ЕстьЗначениеВПамяти(Наименование, Тип) Экспорт 
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Memory.Адрес КАК Адрес
	|ИЗ
	|	РегистрСведений.Memory КАК Memory
	|ГДЕ
	|	Memory.Наименование ПОДОБНО &Наименование
	|	И Memory.Тип = &Тип");
	
	Запрос.УстановитьПараметр("Тип",			 Тип);
	Запрос.УстановитьПараметр("Наименование",	 Наименование);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции
//*****************************************************************************************
