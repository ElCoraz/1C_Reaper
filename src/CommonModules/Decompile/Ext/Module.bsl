//*****************************************************************************************
Функция ЕстьЗначениеВПамяти(Наименование, Тип) Экспорт 
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Memory.Адрес КАК Адрес
	|ИЗ
	|	РегистрСведений.Memory КАК Memory
	|ГДЕ
	|	Memory.Наименование ПОДОБНО &Наименование
	|	И Memory.Тип = &Тип");
	
	Запрос.УстановитьПараметр("Тип",			 Тип);
	Запрос.УстановитьПараметр("Наименование",	 Наименование);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции
//*****************************************************************************************
Функция ЭтоЗначениеВПамяти(Адрес) Экспорт 
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Memory.Адрес КАК Адрес
	|ИЗ
	|	РегистрСведений.Memory КАК Memory
	|ГДЕ
	|	Memory.Адрес = &Адрес");
	
	Запрос.УстановитьПараметр("Адрес", Адрес);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции
//*****************************************************************************************
Функция ЭтоЗначениеВСтекеВременныхПеременных(Адрес) Экспорт 
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	StackTMP.Адрес КАК Адрес
	|ИЗ
	|	РегистрСведений.StackTMP КАК StackTMP
	|ГДЕ
	|	StackTMP.Адрес = &Адрес");
	
	Запрос.УстановитьПараметр("Адрес", Адрес);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции
//***************************************************************************************** 
Функция ПолучитьАдрес(opCode, operand)  
	
	Если opCode = 2 ИЛИ opCode = 4 Тогда 
		
		Если opCode = 2 Тогда 
			
			Тип = Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная;
			
		ИначеЕсли opCode = 3 Тогда 
			
			Тип = Перечисления.ТипЗначенияПамяти.ЛокальнаяПеременная;
			
		ИначеЕсли opCode = 4 Тогда 
			
			Тип = Перечисления.ТипЗначенияПамяти.Константа;
			
		КонецЕсли;
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	Memory.Адрес КАК Адрес
		|ИЗ
		|	РегистрСведений.Memory КАК Memory
		|ГДЕ
		|	Memory.Строка = &Строка
		|	И Memory.Тип = &Тип");
		
		Запрос.УстановитьПараметр("Тип",	 Тип);
		Запрос.УстановитьПараметр("Строка",	 operand);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда 
			
			Возврат Выборка.Адрес;		
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	
КонецФункции
//***************************************************************************************** 
Процедура УстановитьЗначениеПамяти(Данные, Значение) Экспорт
	
	Если ЭтоЗначениеВПамяти(Данные.Адрес) Тогда 
		
		Memory = РегистрыСведений.Memory.СоздатьМенеджерЗаписи();
		
		ЗаполнитьЗначенияСвойств(Memory, Данные);
		
		Memory.Значение = Новый ХранилищеЗначения(Значение); 
		
		Memory.Записать(Истина);  
		
	ИначеЕсли ЭтоЗначениеВСтекеВременныхПеременных(Данные.Адрес) Тогда 
		
		StackTMP = РегистрыСведений.StackTMP.СоздатьМенеджерЗаписи();    
		
		StackTMP.Тип			 = Данные.Тип; 
		StackTMP.Адрес			 = Данные.Адрес; 
		StackTMP.Отладка		 = Данные.Отладка;
		StackTMP.Наименование	 = Данные.Наименование; 
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	StackTMP.Строка КАК Строка
		|ИЗ
		|	РегистрСведений.StackTMP КАК StackTMP
		|ГДЕ
		|	StackTMP.Адрес = &Адрес");
		
		Запрос.УстановитьПараметр("Адрес", Данные.Адрес);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда 
			
			StackTMP.Строка = Выборка.Строка; 
			
		КонецЕсли;
		
		//ЗаполнитьЗначенияСвойств(StackTMP, Данные);
		
		StackTMP.Значение = Новый ХранилищеЗначения(Значение); 
		
		StackTMP.Записать(Истина);  
		
	КонецЕсли;
	
КонецПроцедуры
//*****************************************************************************************
Процедура УстановитьЗначениеПамятиПоНаименованию(Наименование, Значение, Тип) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Memory.Адрес КАК Адрес,
	|	Memory.Строка КАК Строка,
	|	Memory.Тип КАК Тип,
	|	Memory.Значение КАК Значение,
	|	Memory.Наименование КАК Наименование,
	|	Memory.Отладка КАК Отладка
	|ИЗ
	|	РегистрСведений.Memory КАК Memory
	|ГДЕ
	|	Memory.Наименование = &Наименование
	|	И Memory.Тип = &Тип");
	
	Запрос.УстановитьПараметр("Тип",			 Тип);
	Запрос.УстановитьПараметр("Наименование",	 Наименование);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Memory = РегистрыСведений.Memory.СоздатьМенеджерЗаписи();
		
		ЗаполнитьЗначенияСвойств(Memory, Выборка);
		
		Memory.Строка = 0;
		
		Memory.Значение = Новый ХранилищеЗначения(Значение); 
		
		Memory.Записать(Истина);
		
	Иначе
		
		ВызватьИсключение "Не найдено значение - " + Наименование + " в памяти"; 
		
	КонецЕсли;
	
КонецПроцедуры
//*****************************************************************************************
Функция ПолучитьЗначениеНастроек(Тип) Экспорт 
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Значения.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.Значения КАК Значения
	|ГДЕ
	|	Значения.Тип = &Тип");
	
	Запрос.УстановитьПараметр("Тип", Тип);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		
		Возврат Выборка.Значение.Получить();
		
	КонецЕсли; 
	
	Возврат Неопределено;
	
КонецФункции
//*****************************************************************************************
Процедура УстановитьЗначениеНастроек(Проект, Файл, Тип, Значение) Экспорт 
	
	Значения = РегистрыСведений.Значения.СоздатьМенеджерЗаписи();
	
	Значения.Тип		 = Тип;
	Значения.Файл		 = Файл;
	Значения.Проект		 = Проект;
	Значения.Значение	 = Новый ХранилищеЗначения(Значение);
	
	Значения.Записать(Истина);
	
КонецПроцедуры
//*****************************************************************************************
//Процедура ЗаполнитьЗначения() Экспорт   
//	
//	УстановитьЗначениеПамятиПоНаименованию("_че", Ложь, Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_хщ", Истина, Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_чй", 1, Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_ёf", 20, Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_зё", "●●●●●●●●●●●●●●●●●●●●●●●", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_yр", "e", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_ых", 0, Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_ээ", -1, Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_oз", 10, Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_щч", "^-?[0-9]+\.?[0-9]*$", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_п5", "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_ua", "^[0-9]+:[0-9a-fA-F]{32}$", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_дi", "^#base64:[0-9a-zA-Z\+=\r\n\/]+$", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_йд", "^-?[0-9]+\.?[0-9]*e-?[0-9]+$", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_аи", "Не удалось определить тип значения ", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_нy", 2, Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_чъ", 3, Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_qш", "", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_cх", 300, Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_вq", "{", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_sa", """", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_й0", ",", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_уo", "}", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_us", "Недопустимый символ ", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_ад", " (Код символа ", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_ё6", ") в режиме ожидания разделителя", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_wa", "Файл """, Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_uв", """ не найден", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_c9", "Обработка файла ", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_eт", "_U", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_oт", "Не удалось открыть файл """, Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_щд", """ (файл не является контейнером 1Cv8 или файл открыт другой программой)", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_sб", "\image", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_qу", ".", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_ыv", "Неточный путь! ", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_iм", " для """, Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_уw", "Не удалось определить тип модуля ", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_н4", "Обработка файла """, Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_ыt", """ завершена!", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_щbb", "Создан файл с открытыми модулями """, Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_ьп", "Обработка завершена!", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_тп", "\text", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_ьs", "\info", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_тв", "Не найден файл """, Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_pf", "\info"". Структура контейнера нарушена!", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_жs", "{2", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_иo", "{2,1,0,"""",0}", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_цт", "{3", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_ф0", "{3,1,0,"""",0}", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_кm", "Неизвестная версия структуры файла """, Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("__z", "\info"" """, Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_zd", "Записан файл ", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_pир", "Записан ", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_soф", " ", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_nj", "version", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_еу", "В контейнере не найден файл version", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_fз", "Версия контейнера 1С: ", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_фр", "5.0", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_ъiд", "6.0", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_mа", "metadata\root", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_gu", "106.0", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_mш", "200.0", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_чж", "202.2", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_сw", "216.0", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_дэ", "root", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_вo", "Версия контейнера неизвестна, правильность работы и результат не гарантирован", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_cf", "В контейнере не найден файл root", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_ёю", "versions", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_ыe", "В контейнере не найден файл versions", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_ej", "metadata\", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_cщм", "Неизвестная версия """, Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_гш", """ файла root", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_tf", "В контейнере не найден файл метаданных """, Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_rп", "9cd510cd-abfc-11d4-9434-004095e12fc7", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_pо", "Общие", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_f3", "9fcd25a0-4822-11d4-9414-008048da11f9", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_xй", "Основные", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_гю", "e3687481-0a87-462c-a166-9f34594f9bba", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("__w", "БухгалтерскийУчет", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_zo", "9de14907-ec23-4a07-96f0-85521cb6b53b", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_dь", "Расчет", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_vв", "51f2d5d8-ea4d-4064-8892-82951750031e", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("__х", "БизнесПроцессы", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_ba", "c3831ec8-d8d5-4f93-8a22-f9bfae07327f", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_ий", "ВнешняяОбработка", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_юя", "e41aff26-25cf-4bb6-b6c1-3f478a75f374", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_pe", "ВнешнийОтчет", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_жr", "Неизвестный вид группы метаданных """, Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_t1", ".0", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_цуd", ".5", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_m_ъ", ".6", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_ь30", ".7", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_яь", "0fe48980-252d-11d6-a3c7-0050bae0a776", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_ва", "37f2fa9a-b276-11d4-9435-004095e12fc7", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_д0", "24c43748-c938-45d0-8d14-01424a72b11e", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_сдл", "09736b02-9cac-4e3f-b4f7-d3e9576ab948", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_ьм", "857c4a91-e5f4-4fac-86ec-787626f1c108", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_ъh", ".2", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("__д", ".3", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_о_", "3e7bfcc0-067d-11d6-a3c7-0050bae0a776", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_hdп", "4e828da6-0f44-4b5b-b1c0-a2b3cfe7bdcc", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_gи", "11bdaf85-d5ad-4d91-bb24-aa0eee139052", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_eэ", "39bddf6a-0c3c-452b-921c-d99cfa1c2f1b", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_gw", "0c89c792-16c3-11d5-b96b-0050bae0a95d", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_eэм", "7dcd43d9-aca5-4926-b549-1842e6a4e8cf", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_ец", "cc9df798-7c94-4616-97d2-7aa0b7bc515e", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_гф", "8657032e-7740-4e1d-a3ba-5dd6e8afb78f", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	//УстановитьЗначениеПамятиПоНаименованию("_мшъ", "d26096fb-7a5d-4df9-af63-47d04771fa9b", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_оl", "3e5404af-6ef8-4c73-ad11-91bd2dfac4c8", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_ь0", "58848766-36ea-4076-8800-e91eb49590d7", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_гч", "9cd510ce-abfc-11d4-9434-004095e12fc7", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_dн", "07ee8426-87f1-11d5-b99c-0050bae0a95d", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_zdo", "0195e80c-b157-11d4-9435-004095e12fc7", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_хи", "cf4abea6-37b2-11d4-940f-008048da11f9", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_w5", "061d872a-5787-460e-95ac-ed74ea3a3e84", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_щм", "36a8e346-9aaa-4af9-bdbd-83be3c177977", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_gы", "bc587f20-35d9-11d6-a3c7-0050bae0a776", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_er", "4612bd75-71b7-4a5c-8cc5-2b0b65f9fa0d", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_чс", ".1", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_aф", "f6a80749-5ad7-400b-8519-39dc5dff2542", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_яу", "631b75a0-29e2-11d6-a3c7-0050bae0a776", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_ys", "bf845118-327b-4682-b5c6-285d2a0eb296", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_яа", "82a1b659-b220-4d94-a9bd-14d757b95a48", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_mn", ".15", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_п5w", ".16", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_ъn", "13134201-f60b-11d5-a3c7-0050bae0a776", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_фч", "b64d9a40-1642-11d6-a3c7-0050bae0a776", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_гв", "238e7e88-3c5f-48b2-8a3b-81ebbecb20ed", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_и1", ".14", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_zъ", "2deed9b8-0056-4ffe-a473-c20a6c32a0bc", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_еg", "30b100d6-b29f-47ac-aec7-cb8ca8a54767", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_bp", "f2de87a8-64e5-45eb-a22d-b3aedab050e7", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_м6", "fcd3404e-1523-48ce-9bc0-ecdb822684a1", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_nр", ".8", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("__1и", "3e63355c-1378-4953-be9b-1deb5fb6bec5", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_дё", "46b4cd97-fd13-4eaa-aba2-3bddd7699218", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_mqя", "af547940-3268-434f-a3e7-e47d6d2638c3", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_м9", "30d554db-541e-4f62-8970-a1c6dcfeb2bc", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_онж", "1c57eabe-7349-44b3-b1de-ebfeab67b47d", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_mм", "2f1a5187-fb0e-4b05-9489-dc5dd6412348", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_cй", "Неизвестный вид метаданных """, Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_йц", "В контейнере не найден файл метаданных объекта """, Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_ас", "БазовыйТип,Значение", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_йf", "0", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_аы", "Ошибка поиска имени объекта в файле метаданных объекта ", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_эъ", "274bf899-db0e-4df6-8ab5-67bf6371ec0b", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_дю", "Ощибка поиска ветки перерасчетов в файле метаданных ", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_mw", " регистра расчета ", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_пv", "Ошибка поиска записи о версии файла """, Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_ёп6", """ (найдено несколько записей о версии)", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_еwа", """""", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_ят", 100, Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_х01", "ЧН=0; ЧГ=0", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_еj", "ДФ=ггггММддЧЧммсс; ДП=00010101000000", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_rо", "Неизвестный тип """, Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_lф", """ +значения """, Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_оd", "Строка", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_шж", "Корень", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_то", 4, Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_ьcэ", 5, Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_oть", 6, Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_vр", "9", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_бe", "a", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_fг", "f", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_lю", """ не существует!", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_юp", "Разбор исходного текста в дерево", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_фу", "-", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_жф4", ") в режиме ", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_y6", 1000, Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_w0", "Разбор исходного текста в дерево ", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_uбм", "НовыйИндекс", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_их", "НачалоБлока", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_тю", "Булево", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_ьо", "cmd", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_vо", "const", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_еp", "var", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_vуv", "lbl", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_щн", "proc", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_адэ", 1000000, Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_vm", "Var", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_е6l", "Lbl", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_яr", "DefPrm", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_i9", "N", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_ыp", "S", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_с6", "D", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_з9я", "B", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_ци", 22, Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("__о", ":", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_ть", "Попытка", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_бg0", 44, Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_я4", 16, Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_сd", " Экспорт", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_яu", "Перем ", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_uk", ";", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_ыpь", ", ", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_ыpь", ", ", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_ъ5", "	", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_dт", "; ", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_ъo", "Функция ", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_еj_", "Процедура ", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_аb", "(", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_сz", " = """, Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_л8", " = ", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_iэ", "1", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_дмж", " = Истина", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_тq", " = Ложь", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_фy", " = '", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_jz", "'", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_p4", "L", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_гл", " = Null", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_doй", "U", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_gr", " = Неопределено", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_uвэ", "Знач ", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_мь", ")", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_ъ2", 40, Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_рp", 39, Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_zы", "Пока ", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_hк", " Цикл", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_оlh", "КонецЦикла;", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_щn", "Продолжить;", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_ыс", 7, Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_йш", "Возврат", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_дж", "Прервать;", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_yd", "Если ", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_чш", " Тогда", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_вr2", 45, Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_фтp", "ИначеЕсли ", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_s2", "Иначе", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_йшж", "КонецЕсли", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_hж", 9, Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_vа", "Исключение", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_бu", "КонецПопытки;", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_оj", "Возврат;", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_ьl", 13, Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_юx", 14, Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_шг", "Для каждого ", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_кi", " Из ", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_hщ", 8, Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_ж2", 15, Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_мв", "Для ", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_jр", " По ", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_pd", "КонецФункции", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_оrг", "КонецПроцедуры", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_qк", 99, Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_уu", "Неизвестный опкод ", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_вf", " на шаге ", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_по2", 512, Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_ць", 50, Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_шi", "Не достаточно значений в стеке на шаге ", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_ъб", "Ошибка определения конструкции ?() на шагах ", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_l2", " - ", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_цъ", ". Ожидаемый код не равен 39", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_hdg", "?(", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_п9", "|", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_щ2", 11, Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_gпк", 12, Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_ъы", 17, Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_шm", 18, Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_bpm", "[", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_э0д", "]", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_p9f", 19, Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_лdъ", 21, Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_fп", 69, Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_шэ", 23, Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_юh", 24, Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_lgh", 25, Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_пз", 26, Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_qc", "-1", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_дm", 27, Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_uн", 32, Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_sн", 31, Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_х1i", "																																		", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_фt", "0						
//	|1		0				1
//	|2	0	1		2		
//	|3	0	1		3		
//	|4	0	1		4		
//	|5	0	1		5		
//	|6	0	1	Ложь	6		
//	|7	0	1	Истина	6		
//	|8	0	1	Неопределено	6		
//	|9	0	1	Null	6		
//	|10	0	1		6		
//	|11						99
//	|12	1	1		7		
//	|13	2	1		18		
//	|14	1	1				2
//	|15	1	1				3
//	|16	2	0	=	27	7	
//	|17	1	0		23		
//	|18				11		
//	|19		0		12		
//	|20		0		13		
//	|21		0		13		
//	|22				16		16
//	|23	1	1	-	15		
//	|24	2	1	+	8	2	
//	|25	2	1	-	8	2	
//	|26	2	1	*	8	1	
//	|27	2	1	/	8	1	
//	|28	2	1	%	8	1	
//	|29	1	1	Не	15	3	
//	|30	0	0	И	22	5	
//	|31	0	0	Или	22	6	
//	|32						99
//	|33	2	1	=	8	4	
//	|34	2	1	<>	8	4	
//	|35	2	1	>	8	4	
//	|36	2	1	<	8	4	
//	|37	2	1	>=	8	4	
//	|38	2	1	<=	8	4	
//	|39						6
//	|40	1	0				7
//	|41						99
//	|42			Перейти	17		
//	|43	1	1				8
//	|44			Попытка	20		9
//	|45						10
//	|46			КонецПопытки	21		11
//	|47		0	ВызватьИсключение	19		
//	|48	0	0				13
//	|49	0	1				14
//	|50	0	0				15
//	|51		1	Новый	14		
//	|52	1	0	Выполнить	9		
//	|53	1	1	СтрДлина	9		
//	|54	1	1	СокрЛ	9		
//	|55	1	1	СокрП	9		
//	|56	1	1	СокрЛП	9		
//	|57	2	1	Лев	9		
//	|58	2	1	Прав	9		
//	|59	3	1	Сред	26		
//	|60	2	1	Найти	9		
//	|61	1	1	ВРег	9		
//	|62	1	1	НРег	9		
//	|63	1	1	Символ	9		
//	|64	2	1	КодСимвола	9		
//	|65	1	1	ПустаяСтрока	9		
//	|66	1	1	Цел	9		
//	|67	2	1	Окр	9		
//	|68	3	1	Окр	9		
//	|69	1	1	Булево	9		
//	|70	1	1	Число	9		
//	|71	1	1	Строка	9		
//	|72	1	1	Дата	9		
//	|73	3	1	Дата	9		
//	|74	6	1	Дата	9		
//	|75	2	1	ДобавитьМесяц	9		
//	|76	1	1	НачалоМесяца	9		
//	|77	1	1	КонецМесяца	9		
//	|78	1	1	НачалоКвартала	9		
//	|79	1	1	КонецКвартала	9		
//	|80	1	1	НачалоГода	9		
//	|81	1	1	КонецГода	9		
//	|82	1	1	Год	9		
//	|83	1	1	Месяц	9		
//	|84	1	1	День	9		
//	|85	1	1	Час	9		
//	|86	1	1	Минута	9		
//	|87	1	1	Секунда	9		
//	|88	1	1	ДеньГода	9		
//	|89	1	1	НеделяГода	9		
//	|90	1	1	ДеньНедели	9		
//	|91	1	1	НачалоНедели	9		
//	|92	1	1	КонецНедели	9		
//	|93	1	1	НачалоДня	9		
//	|94	1	1	КонецДня	9		
//	|95	1	1	НачалоЧаса	9		
//	|96	1	1	КонецЧаса	9		
//	|97	1	1	НачалоМинуты	9		
//	|98	1	1	КонецМинуты	9		
//	|99	0	1	ТекущаяДата	9		
//	|100	3	1	СтрЗаменить	9		
//	|101	1	1	СтрЧислоСтрок	9		
//	|102	2	1	СтрПолучитьСтроку	9		
//	|103		1	Мин	10		
//	|104		1	Макс	10		
//	|105	2	1	СтрЧислоВхождений	9		
//	|106	0	1	ОписаниеОшибки	9		
//	|107	1	1	ТипЗнч	9		
//	|108	1	1	Тип	9		
//	|109	1	1	Вычислить	9		
//	|110	2	1	Формат	9		
//	|111	2	1	Новый	9		
//	|112	1	1	ACos	9		
//	|113	1	1	ASin	9		
//	|114	1	1	ATan	9		
//	|115	1	1	Cos	9		
//	|116	1	1	Exp	9		
//	|117	1	1	Log	9		
//	|118	1	1	Log10	9		
//	|119	2	1	Pow	9		
//	|120	1	1	Sin	9		
//	|121	1	1	Sqrt	9		
//	|122	1	1	Tan	9		
//	|123	2	0	ДобавитьОбработчик	24		
//	|124	4	0	ДобавитьОбработчик	25		
//	|125	2	0	УдалитьОбработчик	24		
//	|126	4	0	УдалитьОбработчик	25		
//	|127	1	1	ТРег	9		
//	|128	0	1	ИнформацияОбОшибке	9		
//	|129						99
//	|130						99
//	|131						99
//	|132						99
//	|133						99
//	|134						99
//	|135						99
//	|136						99
//	|137						99
//	|138						99
//	|139						99
//	|140						99
//	|141						99
//	|142						99
//	|143						99
//	|144						99
//	|145						99
//	|146						99
//	|147						99
//	|148						99
//	|149						99
//	|150						99
//	|151						99
//	|", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	
//	
//	УстановитьЗначениеПамятиПоНаименованию("_г3", "Число", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_p0", "Дата", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_rы", "A", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_tб", "Z", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_nj1", "z", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_сл", "А", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_ыщ", "я", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_х1ь", "Ё", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_шнм", "ё", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_wь", "_", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_вo9", "Пусто", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("__дж", "GUID", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_дв", "Ссылка", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_ezд", "Base64", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_tn", "Число с показателем", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_юс", "Список", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_lm", "Неизвестно", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_оle", "VBScript.RegExp", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_эj", "AddIn.Cv8cf", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_kр", "Cv8cf.dll", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_щz", "v8cf", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_аыj", "Не удалось записать внешнюю компоненту v8cf во временный каталог", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_тl", "Не удалось загрузить внешнюю компоненту v8cf (не хватает прав?)", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_еш", "модуль внешнего отчета", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_жw", "модуль приложения", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_ьцo", "модуль внешнего соединения", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_ада", "общий модуль", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_r2", "модуль плана обмена", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_бе", "модуль менеджера значения константы", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_ъч", "модуль справочника", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("__ж", "модуль набора записи последовательности", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_кп", "модуль документа", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_hр", "модуль отчета", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_bt", "модуль обработки", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_ьv", "модуль плана видов характеристик", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_ю0ж", "модуль плана счетов", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_ёr", "модуль плана видов расчета", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_уъ", "модуль набора записей регистра сведений", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_хж", "модуль набора записей регистра накопления", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_ыz", "модуль набора записей регистра бухгалтерии", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_вtп", "модуль набора записей регистра расчета", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_tн", "модуль бизнес-процесса", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_юь", "модуль задачи", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_lz", "модуль набора записей перерасчета", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_jл", "модуль внешней обработки", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("__x", "модуль сеанса", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_жz", "модуль web-сервиса", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_иm", "модуль управляемого приложения", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_vs", "модуль команды", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_xl", "модуль менеджера бизнес-процесса", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_fго", "модуль менеджера документа", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_a8", "модуль менеджера журнада документов", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_wn", "модуль менеджера задачи", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_uу", "модуль менеджера константы", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_дa", "модуль менеджера критерия отбора", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_хфг", "модуль менеджера обработки", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("__с", "модуль менеджера отчета", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_bп", "модуль менеджера перечисления", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_шt", "модуль менеджера плана видов расчета", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_f5", "модуль менеджера плана видов характеристик", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_мj", "модуль менеджера плана обмена", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_nh", "модуль менеджера плана счетов", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_р8", "модуль менеджера последовательности", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_bщ", "модуль менеджера регистра бухгалтерии", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_е7", "модуль менеджера регистра накопления", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_ою", "модуль менеджера регистра расчета", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_tb", "модуль менеджера регистра сведений", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	УстановитьЗначениеПамятиПоНаименованию("_hы", "модуль менеджера хранилища настроек", Перечисления.ТипЗначенияПамяти.ГлобальнаяПеременная);
//	
//КонецПроцедуры
////***************************************************************************************** 
Функция ПолучитьОпКоды() 
	
	OpCode = Новый Соответствие;
	
	OpCode.Вставить(0, Новый Структура("Мнемоника, Описание", "Nop", "Нет операции"));
	OpCode.Вставить(1, Новый Структура("Мнемоника, Описание", "LineNum", "Начало строки кода"));
	OpCode.Вставить(2, Новый Структура("Мнемоника, Описание", "LdVar", "Загрузить в стек глобальную переменную"));
	OpCode.Вставить(3, Новый Структура("Мнемоника, Описание", "LdLoc", "Загрузить в стек локальную переменную"));
	OpCode.Вставить(4, Новый Структура("Мнемоника, Описание", "LdConst", "Загрузить в стек константное значение"));
	OpCode.Вставить(5, Новый Структура("Мнемоника, Описание", "LdRet", "Загрузить на стек результат последней функции/метода"));
	OpCode.Вставить(6, Новый Структура("Мнемоника, Описание", "LdFalse", "Загрузить на стек Ложь"));
	OpCode.Вставить(7, Новый Структура("Мнемоника, Описание", "LdTrue", "Загрузить на стек Истина"));
	OpCode.Вставить(8, Новый Структура("Мнемоника, Описание", "LdUndef", "Загрузить на стек Неопределено"));
	OpCode.Вставить(9, Новый Структура("Мнемоника, Описание", "LdNull", "Загрузить на стек Null"));
	OpCode.Вставить(10, Новый Структура("Мнемоника, Описание", "LdNone", "Загрузить на стек пустое значение"));
	OpCode.Вставить(11, Новый Структура("Мнемоника, Описание", "unknown1", "unknown1"));
	OpCode.Вставить(12, Новый Структура("Мнемоника, Описание", "LdProp", "Получение свойства .<Имя Свойства>"));
	OpCode.Вставить(13, Новый Структура("Мнемоника, Описание", "LdIndex", "Получение элемента массива []"));
	OpCode.Вставить(14, Новый Структура("Мнемоника, Описание", "Iter", "Получить из коллекции выборку"));
	OpCode.Вставить(15, Новый Структура("Мнемоника, Описание", "Next", "Получить из выборки очередной элемент коллекции. Этот элемент попадает в переменную, которая была на вершине стека, а в стек вместо этой переменной помещается результат успешности (Истина - получили очередной элемент, Ложь - нет)"));
	OpCode.Вставить(16, Новый Структура("Мнемоника, Описание", "Assign", "="));
	OpCode.Вставить(17, Новый Структура("Мнемоника, Описание", "Ret", "Возврат (установить результат функции/метода)"));
	OpCode.Вставить(18, Новый Структура("Мнемоника, Описание", "ArgNum", "Указание количества используемых параметров в следующем вызове (метода, функции)"));
	OpCode.Вставить(19, Новый Структура("Мнемоника, Описание", "CallLoc", "Вызов локальной процедуры или функции"));
	OpCode.Вставить(20, Новый Структура("Мнемоника, Описание", "CallProc", "Выполнение метода .<Имя метода>() (являющегося процедурой, т.е. без возврата значения)"));
	OpCode.Вставить(21, Новый Структура("Мнемоника, Описание", "CallFunc", "Выполнение метода .<Имя метода>() (являющегося функцией, т.е. возвращающий значение)"));
	OpCode.Вставить(22, Новый Структура("Мнемоника, Описание", "End", "Конец блока (процедуры, модуля)"));
	OpCode.Вставить(23, Новый Структура("Мнемоника, Описание", "Minus", "*(-1)"));
	OpCode.Вставить(24, Новый Структура("Мнемоника, Описание", "Add", "+"));
	OpCode.Вставить(25, Новый Структура("Мнемоника, Описание", "Sub", "-"));
	OpCode.Вставить(26, Новый Структура("Мнемоника, Описание", "Mul", "*"));
	OpCode.Вставить(27, Новый Структура("Мнемоника, Описание", "Div", "/"));
	OpCode.Вставить(28, Новый Структура("Мнемоника, Описание", "Mod", "%"));
	OpCode.Вставить(29, Новый Структура("Мнемоника, Описание", "Not", "НЕ"));
	OpCode.Вставить(30, Новый Структура("Мнемоника, Описание", "And", "И"));
	OpCode.Вставить(31, Новый Структура("Мнемоника, Описание", "Or", "ИЛИ"));
	OpCode.Вставить(32, Новый Структура("Мнемоника, Описание", "unknown2", "unknown2"));
	OpCode.Вставить(33, Новый Структура("Мнемоника, Описание", "Cmp", "=="));
	OpCode.Вставить(34, Новый Структура("Мнемоника, Описание", "Ne", "<>"));
	OpCode.Вставить(35, Новый Структура("Мнемоника, Описание", "Gt", ">"));
	OpCode.Вставить(36, Новый Структура("Мнемоника, Описание", "Lt", "<"));
	OpCode.Вставить(37, Новый Структура("Мнемоника, Описание", "Gte", ">="));
	OpCode.Вставить(38, Новый Структура("Мнемоника, Описание", "Lte", "<="));
	OpCode.Вставить(39, Новый Структура("Мнемоника, Описание", "Jmp", "Переход на заданный шаг"));
	OpCode.Вставить(40, Новый Структура("Мнемоника, Описание", "JmpFalse", "Переход, если Ложь"));
	OpCode.Вставить(41, Новый Структура("Мнемоника, Описание", "JmpTrue", "Переход, если Истина"));
	OpCode.Вставить(42, Новый Структура("Мнемоника, Описание", "Goto", "Перейти Lbl"));
	OpCode.Вставить(43, Новый Структура("Мнемоника, Описание", "Inc", "Инкремент"));
	OpCode.Вставить(44, Новый Структура("Мнемоника, Описание", "BeginTry", "Попытка"));
	OpCode.Вставить(45, Новый Структура("Мнемоника, Описание", "BlckEnd", "Завершение блока (Процедура, Функция, Попытка) без ошибки (Возврат или Исключение)"));
	OpCode.Вставить(46, Новый Структура("Мнемоника, Описание", "EndTry", "КонецПопытки (конец обработки ошибки)"));
	OpCode.Вставить(47, Новый Структура("Мнемоника, Описание", "Raise", "ВызватьИсключение"));
	OpCode.Вставить(48, Новый Структура("Мнемоника, Описание", "PutTmp", "Создать на стеке временных переменных временную переменную"));
	OpCode.Вставить(49, Новый Структура("Мнемоника, Описание", "LdTmp", "Загрузить в стек временную переменную из стека временных переменных"));
	OpCode.Вставить(50, Новый Структура("Мнемоника, Описание", "PopTmp", "Удалить из стека временных переменных временную переменную"));
	OpCode.Вставить(51, Новый Структура("Мнемоника, Описание", "New", "Новый"));
	OpCode.Вставить(52, Новый Структура("Мнемоника, Описание", "Exec", "Выполнить"));
	OpCode.Вставить(53, Новый Структура("Мнемоника, Описание", "СтрДлина", "СтрДлина"));
	OpCode.Вставить(54, Новый Структура("Мнемоника, Описание", "СокрЛ", "СокрЛ"));
	OpCode.Вставить(55, Новый Структура("Мнемоника, Описание", "СокрП", "СокрП"));
	OpCode.Вставить(56, Новый Структура("Мнемоника, Описание", "СокрЛП", "СокрЛП"));
	OpCode.Вставить(57, Новый Структура("Мнемоника, Описание", "Лев", "Лев"));
	OpCode.Вставить(58, Новый Структура("Мнемоника, Описание", "Прав", "Прав"));
	OpCode.Вставить(59, Новый Структура("Мнемоника, Описание", "Сред", "Сред"));
	OpCode.Вставить(60, Новый Структура("Мнемоника, Описание", "Найти", "Найти"));
	OpCode.Вставить(61, Новый Структура("Мнемоника, Описание", "Врег", "Врег"));
	OpCode.Вставить(62, Новый Структура("Мнемоника, Описание", "Нрег", "Нрег"));
	OpCode.Вставить(63, Новый Структура("Мнемоника, Описание", "Символ", "Символ"));
	OpCode.Вставить(64, Новый Структура("Мнемоника, Описание", "КодСимвола", "КодСимвола"));
	OpCode.Вставить(65, Новый Структура("Мнемоника, Описание", "ПустаяСтрока", "ПустаяСтрока"));
	OpCode.Вставить(66, Новый Структура("Мнемоника, Описание", "Цел", "Цел"));
	OpCode.Вставить(67, Новый Структура("Мнемоника, Описание", "Окр", "Окр"));
	OpCode.Вставить(68, Новый Структура("Мнемоника, Описание", "Окр", "Окр"));
	OpCode.Вставить(69, Новый Структура("Мнемоника, Описание", "Булево", "Булево"));
	OpCode.Вставить(70, Новый Структура("Мнемоника, Описание", "Число", "Число"));
	OpCode.Вставить(71, Новый Структура("Мнемоника, Описание", "Строка", "Строка"));
	OpCode.Вставить(72, Новый Структура("Мнемоника, Описание", "Дата", "Дата"));
	OpCode.Вставить(73, Новый Структура("Мнемоника, Описание", "Дата", "Дата"));
	OpCode.Вставить(74, Новый Структура("Мнемоника, Описание", "Дата", "Дата"));
	OpCode.Вставить(75, Новый Структура("Мнемоника, Описание", "ДобавитьМесяц", "ДобавитьМесяц"));
	OpCode.Вставить(76, Новый Структура("Мнемоника, Описание", "НачалоМесяца", "НачалоМесяца"));
	OpCode.Вставить(77, Новый Структура("Мнемоника, Описание", "КонецМесяца", "КонецМесяца"));
	OpCode.Вставить(78, Новый Структура("Мнемоника, Описание", "НачалоКвартала", "НачалоКвартала"));
	OpCode.Вставить(79, Новый Структура("Мнемоника, Описание", "КонецКвартала", "КонецКвартала"));
	OpCode.Вставить(80, Новый Структура("Мнемоника, Описание", "НачалоГода", "НачалоГода"));
	OpCode.Вставить(81, Новый Структура("Мнемоника, Описание", "КонецГода", "КонецГода"));
	OpCode.Вставить(82, Новый Структура("Мнемоника, Описание", "Год", "Год"));
	OpCode.Вставить(83, Новый Структура("Мнемоника, Описание", "Месяц", "Месяц"));
	OpCode.Вставить(84, Новый Структура("Мнемоника, Описание", "День", "День"));
	OpCode.Вставить(85, Новый Структура("Мнемоника, Описание", "Час", "Час"));
	OpCode.Вставить(86, Новый Структура("Мнемоника, Описание", "Минута", "Минута"));
	OpCode.Вставить(87, Новый Структура("Мнемоника, Описание", "Секунда", "Секунда"));
	OpCode.Вставить(88, Новый Структура("Мнемоника, Описание", "ДеньГода", "ДеньГода"));
	OpCode.Вставить(89, Новый Структура("Мнемоника, Описание", "НеделяГода", "НеделяГода"));
	OpCode.Вставить(90, Новый Структура("Мнемоника, Описание", "ДеньНедели", "ДеньНедели"));
	OpCode.Вставить(91, Новый Структура("Мнемоника, Описание", "НачалоНедели", "НачалоНедели"));
	OpCode.Вставить(92, Новый Структура("Мнемоника, Описание", "КонецНедели", "КонецНедели"));
	OpCode.Вставить(93, Новый Структура("Мнемоника, Описание", "НачалоДня", "НачалоДня"));
	OpCode.Вставить(94, Новый Структура("Мнемоника, Описание", "КонецДня", "КонецДня"));
	OpCode.Вставить(95, Новый Структура("Мнемоника, Описание", "НачалоЧаса", "НачалоЧаса"));
	OpCode.Вставить(96, Новый Структура("Мнемоника, Описание", "КонецЧаса", "КонецЧаса"));
	OpCode.Вставить(97, Новый Структура("Мнемоника, Описание", "НачалоМинуты", "НачалоМинуты"));
	OpCode.Вставить(98, Новый Структура("Мнемоника, Описание", "КонецМинуты", "КонецМинуты"));
	OpCode.Вставить(99, Новый Структура("Мнемоника, Описание", "ТекущаяДата", "ТекущаяДата"));
	OpCode.Вставить(100, Новый Структура("Мнемоника, Описание", "СтрЗаменить", "СтрЗаменить"));
	OpCode.Вставить(101, Новый Структура("Мнемоника, Описание", "СтрЧислоСтрок", "СтрЧислоСтрок"));
	OpCode.Вставить(102, Новый Структура("Мнемоника, Описание", "СтрПолучитьСтроку", "СтрПолучитьСтроку"));
	OpCode.Вставить(103, Новый Структура("Мнемоника, Описание", "Мин", "Мин"));
	OpCode.Вставить(104, Новый Структура("Мнемоника, Описание", "Макс", "Макс"));
	OpCode.Вставить(105, Новый Структура("Мнемоника, Описание", "СтрЧислоВхождений", "СтрЧислоВхождений"));
	OpCode.Вставить(106, Новый Структура("Мнемоника, Описание", "ОписаниеОшибки", "ОписаниеОшибки"));
	OpCode.Вставить(107, Новый Структура("Мнемоника, Описание", "ТипЗнч", "ТипЗнч"));
	OpCode.Вставить(108, Новый Структура("Мнемоника, Описание", "Тип", "Тип"));
	OpCode.Вставить(109, Новый Структура("Мнемоника, Описание", "Вычислить", "Вычислить"));
	OpCode.Вставить(110, Новый Структура("Мнемоника, Описание", "Формат", "Формат"));
	OpCode.Вставить(111, Новый Структура("Мнемоника, Описание", "Новый", "Новый"));
	OpCode.Вставить(112, Новый Структура("Мнемоника, Описание", "ACos", "ACos"));
	OpCode.Вставить(113, Новый Структура("Мнемоника, Описание", "ASin", "ASin"));
	OpCode.Вставить(114, Новый Структура("Мнемоника, Описание", "ATan", "ATan"));
	OpCode.Вставить(115, Новый Структура("Мнемоника, Описание", "Cos", "Cos"));
	OpCode.Вставить(116, Новый Структура("Мнемоника, Описание", "Exp", "Exp"));
	OpCode.Вставить(117, Новый Структура("Мнемоника, Описание", "Log", "Log"));
	OpCode.Вставить(118, Новый Структура("Мнемоника, Описание", "Log10", "Log10"));
	OpCode.Вставить(119, Новый Структура("Мнемоника, Описание", "Pow", "Pow"));
	OpCode.Вставить(120, Новый Структура("Мнемоника, Описание", "Sin", "Sin"));
	OpCode.Вставить(121, Новый Структура("Мнемоника, Описание", "Sqrt", "Sqrt"));
	OpCode.Вставить(122, Новый Структура("Мнемоника, Описание", "Tan", "Tan"));
	OpCode.Вставить(123, Новый Структура("Мнемоника, Описание", "ДобавитьОбработчик", "ДобавитьОбработчик"));
	OpCode.Вставить(124, Новый Структура("Мнемоника, Описание", "ДобавитьОбработчик", "ДобавитьОбработчик"));
	OpCode.Вставить(125, Новый Структура("Мнемоника, Описание", "УдалитьОбработчик", "УдалитьОбработчик"));
	OpCode.Вставить(126, Новый Структура("Мнемоника, Описание", "УдалитьОбработчик", "УдалитьОбработчик"));
	OpCode.Вставить(127, Новый Структура("Мнемоника, Описание", "ТРег", "ТРег"));
	OpCode.Вставить(128, Новый Структура("Мнемоника, Описание", "ИнформацияОбОшибке", "ИнформацияОбОшибке"));
	
	Возврат OpCode;
	
КонецФункции
//*****************************************************************************************
Процедура ДобавитьВСтек(Адрес = Неопределено, Значение = Неопределено, Наименование = Неопределено, Тип = Неопределено, ВР = Ложь, УДС = Ложь, Шаг = 0)
	
	Stack = РегистрыСведений.Stack.СоздатьМенеджерЗаписи(); 
	
	Если ВР Тогда 
		
		ЗаполнитьЗначенияСвойств(Stack, Значение);
		
		Stack.Строка = ПолучитьРазмерСтека() + 1;	
		
	ИначеЕсли УДС Тогда 
		
		Stack.Адрес			 = Адрес;
		Stack.АдресУДС		 = Адрес;
		Stack.Строка		 = ПолучитьРазмерСтека() + 1;	
		
	Иначе   
		
		Stack.Тип			 = ?(Тип = Неопределено, Перечисления.ТипЗначенияПамяти.ВременнаяПеременная, Тип);
		Stack.Адрес			 = ?(Адрес = Неопределено, Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"), Адрес);
		Stack.Строка		 = ПолучитьРазмерСтека() + 1;	
		Stack.Значение		 = Новый ХранилищеЗначения(Значение);	
		Stack.Наименование	 = ?(Наименование = Неопределено, Неопределено, Наименование);	
		
	КонецЕсли; 
	
	Stack.Шаг = Шаг;
	
	Stack.Записать(Истина); 
	
КонецПроцедуры
//*****************************************************************************************
Процедура ДобавитьВСтекTMP(Адрес = Неопределено, Значение = Неопределено, Наименование = Неопределено)
	
	StackTMP = РегистрыСведений.StackTMP.СоздатьМенеджерЗаписи();
	
	StackTMP.Тип			 = Перечисления.ТипЗначенияПамяти.ВременнаяПеременная;
	StackTMP.Адрес			 = ?(Адрес = Неопределено, Новый УникальныйИдентификатор(), Адрес);
	StackTMP.Строка			 = ПолучитьРазмерСтекаTMP() + 1;	
	StackTMP.Значение		 = Новый ХранилищеЗначения(Значение);	
	StackTMP.Наименование	 = ?(Наименование = Неопределено, Неопределено, Наименование);	
	
	StackTMP.Записать(Истина);
	
КонецПроцедуры
//*****************************************************************************************
Функция ПолучитьЗначениеПамятиПоАдресу(Адрес, ДальниеПеременные = Неопределено) 
	
	Если ДальниеПеременные = Неопределено Тогда 
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	Memory.Адрес КАК Адрес,
		|	Memory.Наименование КАК Наименование,
		|	Memory.Значение КАК Значение,
		|	Memory.Отладка КАК Отладка,
		|	Memory.Тип КАК Тип,
		|	Memory.Строка КАК Строка
		|ИЗ
		|	РегистрСведений.Memory КАК Memory
		|ГДЕ
		|	Memory.Адрес = &Адрес");
		
		Запрос.УстановитьПараметр("Адрес", Адрес);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда 
			
			Отладка = Выборка.Отладка.Получить();
			
			Возврат Новый Структура("Адрес, Наименование, Значение, Отладка, Тип, Строка", 
			Выборка.Адрес, 
			Выборка.Наименование, 
			?(ЗначениеЗаполнено(Отладка), Отладка, Выборка.Значение.Получить()),
			Выборка.Отладка,
			Выборка.Тип,
			Выборка.Строка
			);
			
		Иначе 
			
			ВызватьИсключение "Не найдено значение в памяти по адресу - " + Строка(Адрес); 
			
		КонецЕсли; 
		
	Иначе 
		
		Возврат Новый Структура("Адрес, Наименование, Значение, Отладка, Тип, Строка", Адрес, "", ДальниеПеременные.Получить(Адрес), "", "", "");
		
	КонецЕсли;
	
КонецФункции
//*****************************************************************************************
Функция ПолучитьРазмерСтека()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	КОЛИЧЕСТВО(Stack.Адрес) КАК Количество
	|ИЗ
	|	РегистрСведений.Stack КАК Stack");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.Количество;
		
	КонецЕсли;
	
	Возврат 0;	
	
КонецФункции
//*****************************************************************************************
Функция ПолучитьРазмерСтекаTMP()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	КОЛИЧЕСТВО(StackTMP.Адрес) КАК Количество
	|ИЗ
	|	РегистрСведений.StackTMP КАК StackTMP");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.Количество;
		
	КонецЕсли;
	
	Возврат 0;	
	
КонецФункции
//*****************************************************************************************
Функция ПолучитьЗначениеСтекаПоИндексу(Индекс)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Stack.Адрес КАК Адрес,
	|	Stack.Строка КАК Строка,
	|	Stack.АдресУДС КАК АдресУДС,
	|	Stack.Значение КАК Значение,
	|	Stack.Отладка КАК Отладка,
	|	Stack.Наименование КАК Наименование,
	|	Stack.Тип КАК Тип
	|ИЗ
	|	РегистрСведений.Stack КАК Stack
	|ГДЕ
	|	Stack.Строка = &Строка");
	
	Запрос.УстановитьПараметр("Строка", Индекс);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		
		Возврат Новый Структура("Строка, Адрес, АдресУДС, Значение, Отладка, Наименование, Тип", Выборка.Строка, Выборка.Адрес, Выборка.АдресУДС, Выборка.Значение, Выборка.Отладка, Выборка.Наименование, Выборка.Тип);		
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции
//*****************************************************************************************
Функция ПолучитьЗначениеСтекаTMPПоИндексу(Индекс)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	StackTMP.Адрес КАК Адрес,
	|	StackTMP.Строка КАК Строка,
	|	StackTMP.Значение КАК Значение,
	|	StackTMP.Отладка КАК Отладка,
	|	StackTMP.Наименование КАК Наименование,
	|	StackTMP.Тип КАК Тип
	|ИЗ
	|	РегистрСведений.StackTMP КАК StackTMP
	|ГДЕ
	|	StackTMP.Строка = &Строка");
	
	Запрос.УстановитьПараметр("Строка", Индекс);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		
		Возврат Новый Структура("Строка, Адрес, Значение, Отладка, Наименование, Тип", Выборка.Строка, Выборка.Адрес, Выборка.Значение, Выборка.Отладка, Выборка.Наименование, Выборка.Тип);		
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции
//***************************************************************************************** 
Процедура УдалитьЗначениеСтека(Индекс)
	
	Stack = РегистрыСведений.Stack.СоздатьНаборЗаписей();
	
	Stack.Отбор.Строка.Установить(Индекс);
	
	Stack.Записать();
	
КонецПроцедуры
//***************************************************************************************** 
Процедура УдалитьЗначениеСтекаTMP(Индекс)
	
	StackTMP = РегистрыСведений.StackTMP.СоздатьНаборЗаписей();
	
	StackTMP.Отбор.Строка.Установить(Индекс);
	
	StackTMP.Записать();
	
КонецПроцедуры
//***************************************************************************************** 
Функция ПолучитьCode(Шаг)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Code.opCode КАК opCode,
	|	Code.Operand КАК Operand,
	|	Code.Адрес КАК Адрес
	|ИЗ
	|	РегистрСведений.Code КАК Code
	|ГДЕ
	|	Code.Строка = &Строка
	|	И НЕ Code.break");
	
	Запрос.УстановитьПараметр("Строка", Шаг);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Возврат Новый Структура("opCode, Operand, Адрес", Выборка.opCode, Выборка.Operand, Выборка.Адрес);		
		
	КонецЦикла;
	
	Возврат Неопределено;	
	
КонецФункции
//*****************************************************************************************
Функция ПолучитьЗначениеПоТипу(Проект, Файл, Тип, ЗначениеВозврата = "") Экспорт 
	
	Значение = Неопределено;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Значения.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.Значения КАК Значения
	|ГДЕ
	|	Значения.Тип = &Тип
	|	И Значения.Проект = &Проект
	|	И Значения.Файл = &Файл");
	
	Запрос.УстановитьПараметр("Тип",	 Тип);
	Запрос.УстановитьПараметр("Файл",	 Файл);
	Запрос.УстановитьПараметр("Проект",	 Проект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		
		Возврат Выборка.Значение.Получить();
		
	КонецЕсли; 
	
	Возврат ЗначениеВозврата;
	
КонецФункции
//*****************************************************************************************
Процедура ТекстМодуля(Проект, Файл, ОпКод, Операнд) Экспорт 
	
	Текст = ПолучитьЗначениеПоТипу(Проект, Файл, Перечисления.Значение.CodeText, "");
	
	УстановитьЗначениеНастроек(Проект, Файл, Перечисления.Значение.CodeText, Текст + "{" + СтрЗаменить(Строка(ОпКод), Символы.НПП, "") + "," + СтрЗаменить(Строка(Операнд), Символы.НПП, "") + "}," + Символы.ПС);
	
КонецПроцедуры
//*****************************************************************************************
Функция ПолучитьАдресМетки(Номер, Тип)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Labels.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.Labels КАК Labels
	|ГДЕ
	|	Labels.Строка = &Строка
	|	И Labels.Тип = &Тип");
	
	Запрос.УстановитьПараметр("Тип",	 Тип);
	Запрос.УстановитьПараметр("Строка",	 Номер);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		
		Возврат	Выборка.Значение;
		
	КонецЕсли;;
	
	ВызватьИсключение "Метки с номером - " + Номер + ", не найдена";	
	
КонецФункции
//*****************************************************************************************
Функция ПолучитьЗначениеКонстантыПоНомеру(Номер)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Memory.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.Memory КАК Memory
	|ГДЕ
	|	Memory.Строка = &Строка
	|	И Memory.Тип = &Тип");
	
	Запрос.УстановитьПараметр("Тип",	 Перечисления.ТипЗначенияПамяти.Константа);
	Запрос.УстановитьПараметр("Строка",	 Номер);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		
		Возврат	Выборка.Значение.Получить();
		
	КонецЕсли;;
	
	ВызватьИсключение "Константа с номером - " + Номер + ", не найдена";	
	
КонецФункции
//*****************************************************************************************
Функция ПолучитьРазмерИстории()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	History.Ном КАК Ном,
	|	History.Строка КАК Строка,
	|	History.opCode КАК opCode,
	|	History.Operand КАК Operand,
	|	History.Описание КАК Описание,
	|	History.Наименование КАК Наименование,
	|	History.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.History КАК History");
	
	Возврат Запрос.Выполнить().Выбрать().Количество();
	
КонецФункции
//*****************************************************************************************
Процедура ЗаписатьИсторию(Строка, ОпКод, Операнд)
	
	Коды = ПолучитьОпКоды();
	
	History = РегистрыСведений.History.СоздатьМенеджерЗаписи(); 
	
	History.Ном				 = ПолучитьРазмерИстории() + 1;	
	History.Строка			 = Строка;	
	History.opCode			 = ОпКод;	
	History.Operand			 = Операнд;	
	History.Описание		 = Коды.Получить(ОпКод).Описание;	
	History.Идентификатор	 = Новый УникальныйИдентификатор();	
	
	History.Записать();
	
КонецПроцедуры
//*****************************************************************************************
Функция ВыполнитьШагОбработки(Проект, Файл) Экспорт 
	
	ДальниеПеременные = Новый Соответствие;
	
	Шаг = ПолучитьЗначениеНастроек(Перечисления.Значение.CurrentPoin); 
	
	Если Шаг = -1 Тогда 
		
		Шаг = ПолучитьЗначениеНастроек(Перечисления.Значение.EntryPoint) + 1; 
		
		Константы.ТекущаяСтрока.Установить(1);
		
		ТекстМодуля(Проект, Файл, 1, Константы.ТекущаяСтрока.Получить());
		
		Константы.ТекущаяСтрока.Установить(Константы.ТекущаяСтрока.Получить() + 1);
		
	КонецЕсли;
	
	Результат = Истина;
	
	Пока Результат Цикл 
		
		РезультатВыполнения = ВыполнитьШаг(Проект, Файл, Шаг, ДальниеПеременные);
		
		Если РезультатВыполнения.Результат Тогда  
			
			Результат = РезультатВыполнения.Результат;
			
			УстановитьЗначениеНастроек(Проект, Файл, Перечисления.Значение.CurrentPoin, РезультатВыполнения.Шаг);
			
			Шаг = РезультатВыполнения.Шаг;
			
		Иначе
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;    
	
КонецФункции
//*****************************************************************************************
Функция ВыполнитьОдинШагОбработки(Проект, Файл) Экспорт 
	
	ДальниеПеременные = Новый Соответствие;
	
	Шаг = ПолучитьЗначениеНастроек(Перечисления.Значение.CurrentPoin); 
	
	Если Шаг = -1 Тогда 
		
		Шаг = ПолучитьЗначениеНастроек(Перечисления.Значение.EntryPoint) + 1; 
		
		Константы.ТекущаяСтрока.Установить(1);
		
		ТекстМодуля(Проект, Файл, 1, Константы.ТекущаяСтрока.Получить());  
		
		Константы.ТекущаяСтрока.Установить(Константы.ТекущаяСтрока.Получить() + 1);    
		
	КонецЕсли;
	
	РезультатВыполнения = ВыполнитьШаг(Проект, Файл, Шаг, ДальниеПеременные);
	
	Если РезультатВыполнения.Результат Тогда  
		
		УстановитьЗначениеНастроек(Проект, Файл, Перечисления.Значение.CurrentPoin, РезультатВыполнения.Шаг);	
		
	КонецЕсли;
	
	Возврат РезультатВыполнения.Результат;    
	
КонецФункции
//*****************************************************************************************   
Функция ВыполнитьШаг(Проект, Файл, Шаг, ДальниеПеременные) Экспорт
	
	НачатьТранзакцию();
	
	Строка = ПолучитьCode(Шаг);
	
	ОпКод	 = Строка.opCode;
	Операнд	 = Строка.Operand;  
	
	Если ОпКод <> 6 
		И ОпКод <> 7 
		И ОпКод <> 39 
		И ОпКод <> 40 
		И ОпКод <> 41 
		И ОпКод <> 42 
		Тогда 
		
		ТекстМодуля(Проект, Файл, ОпКод, Операнд);
		
	КонецЕсли;	
	
	ЗаписатьИсторию(Шаг, ОпКод, Операнд);
	
	Если ОпКод = 0 Тогда // "Нет операции"
	ИначеЕсли ОпКод = 1 Тогда // "Начало строки кода"
	ИначеЕсли ОпКод = 2 Тогда // "Загрузить в стек глобальную переменную"  
		
		ЗначениеПамяти = ПолучитьЗначениеПамятиПоАдресу(Строка.Адрес);
		
		ДобавитьВСтек(ЗначениеПамяти.Адрес, ЗначениеПамяти.Значение, ЗначениеПамяти.Наименование, ЗначениеПамяти.Тип,,, Шаг);  
		
	ИначеЕсли ОпКод = 3 Тогда // "Загрузить в стек локальную переменную"
		
		//ДобавитьВСтек(Данные["values"][ТочкиРазделов.Получить("Proc")]["values"][PROC[PROC.Количество() - 1]]["values"]["values"][Операнд]["Адрес"]);
		
	ИначеЕсли ОпКод = 4 Тогда // "Загрузить в стек константное значение"  
		
		ЗначениеПамяти = ПолучитьЗначениеПамятиПоАдресу(Строка.Адрес);
		
		ДобавитьВСтек(ЗначениеПамяти.Адрес, ЗначениеПамяти.Значение, ЗначениеПамяти.Наименование, ЗначениеПамяти.Тип,,, Шаг);  
		
	ИначеЕсли ОпКод = 5 Тогда // "Загрузить на стек результат последней функции/метода"
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтекаВ = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УстановитьЗначениеПамяти(ЗначениеСтекаВ, 1);
		
	ИначеЕсли ОпКод = 6 Тогда // "Загрузить на стек Ложь" 
		
		ДобавитьВСтек(, Ложь,,,,, Шаг);
		
	ИначеЕсли ОпКод = 7 Тогда // "Загрузить на стек Истина"
		
		ДобавитьВСтек(, Истина,,,,, Шаг);
		
	ИначеЕсли ОпКод = 8 Тогда // "Загрузить на стек Неопределено"
		
		ДобавитьВСтек(, Неопределено,,,,, Шаг);
		
	ИначеЕсли ОпКод = 9 Тогда // "Загрузить на стек Null"
		
		ДобавитьВСтек(, Null,,,,, Шаг);
		
	ИначеЕсли ОпКод = 10 Тогда // "Загрузить на стек пустое значение"
		
		ДобавитьВСтек(, "");
		
	ИначеЕсли ОпКод = 11 Тогда // "unknown1"
	ИначеЕсли ОпКод = 12 Тогда // "Получение свойства .<Имя Свойства>"
		
		Object = ПолучитьЗначениеСтекаПоИндексу(ПолучитьРазмерСтека()).Значение.Получить();
		
		НаименованиеСвойства = ПолучитьЗначениеКонстантыПоНомеру(Операнд + 1);   
		//НаименованиеСвойства = ПолучитьЗначениеКонстантыПоНомеру(Операнд);   
		
		УдалитьЗначениеСтека(ПолучитьРазмерСтека());  
		
		Адрес = Новый УникальныйИдентификатор();
		
		ДальниеПеременные.Вставить(Адрес, Object[НаименованиеСвойства]);
		
		ДобавитьВСтек(Адрес, Адрес,,,, Истина, Шаг);
		
	ИначеЕсли ОпКод = 13 Тогда // "Получение элемента массива []" 
		
		Индекс = ПолучитьЗначениеСтекаПоИндексу(ПолучитьРазмерСтека()).Значение.Получить();	
		
		УдалитьЗначениеСтека(ПолучитьРазмерСтека());
		
		Массив = ПолучитьЗначениеСтекаПоИндексу(ПолучитьРазмерСтека()).Значение.Получить();
		
		УдалитьЗначениеСтека(ПолучитьРазмерСтека());
		
		ДобавитьВСтек(, Массив[Индекс],,,,, Шаг); 
		
	ИначеЕсли ОпКод = 14 Тогда // "Получить из коллекции выборку"
	ИначеЕсли ОпКод = 15 Тогда // "Получить из выборки очередной элемент коллекции. Этот элемент попадает в переменную, которая была на вершине стека, а в стек вместо этой переменной помещается результат успешности (Истина - получили очередной элемент, Ложь - нет)"
	ИначеЕсли ОпКод = 16 Тогда // "Операция = (присвоение)"    
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтекаВ = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтекаН = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		УстановитьЗначениеПамяти(ЗначениеСтекаН, ЗначениеСтекаВ.Значение.Получить()); 
		
		//ТекстМодуля(1, Константы.ТекущаяСтрока.Получить());
		
		Константы.ТекущаяСтрока.Установить(Константы.ТекущаяСтрока.Получить() + 1);
		
	ИначеЕсли ОпКод = 17 Тогда // "Возврат (установить результат функции/метода)"		
	ИначеЕсли ОпКод = 18 Тогда // "Указание количества используемых параметров в следующем вызове (метода, функции)"
		
		ДобавитьВСтек(, Операнд,,,,, Шаг); 
		
	ИначеЕсли ОпКод = 19 Тогда // "Вызов локальной процедуры или функции"
		
		//АдресФункцииПроцедуры =  Stack.Получить(Stack.Количество() - 1).Значение;
		//КоличествоПеременных = Stack.Получить(Stack.Количество() - 2).Значение; 
		//
		//Переменные = Новый Массив;
		//
		//Если КоличествоПеременных > 0 Тогда 
		//	
		//	Для А = 1 По Переменные Цикл 
		//		
		//		Переменные.Добавить(Stack.Получить(Stack.Количество() - 2 - А).Значение); 
		//		
		//	КонецЦикла;
		//	
		//КонецЕсли;
		//
		//Stack.Удалить(Stack.Количество() - 1);
		//Stack.Удалить(Stack.Количество() - 1);
		//
		//Если КоличествоПеременных > 0 Тогда 
		//	
		//	Для А = 1 По Переменные Цикл 
		//		
		//		Stack.Удалить(Stack.Количество() - 1);
		//		
		//	КонецЦикла;
		//	
		//КонецЕсли;
		
	ИначеЕсли ОпКод = 20 Тогда // "Выполнение метода .<Имя метода>() (являющегося процедурой, т.е. без возврата значения)"  
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтекаВ = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(ПолучитьРазмерСтека());    
		
		Для А = 1 По ЗначениеСтекаВ.Значение.Получить() Цикл 
			
			УдалитьЗначениеСтека(ПолучитьРазмерСтека());    
			
		КонецЦикла;
		
	ИначеЕсли ОпКод = 21 Тогда // "Выполнение метода .<Имя метода>() (являющегося функцией, т.е. возвращающий значение)"
		
		Метод = ПолучитьЗначениеКонстантыПоНомеру(Операнд + 1);
		
		ЗначениеСтекаВ = ПолучитьЗначениеСтекаПоИндексу(ПолучитьРазмерСтека());   
		
		УдалитьЗначениеСтека(ПолучитьРазмерСтека());  
		
		Массив = Новый Массив;
		
		Для А = 1 По ЗначениеСтекаВ.Значение.Получить() Цикл  
			
			Массив.Добавить(ПолучитьЗначениеСтекаПоИндексу(ПолучитьРазмерСтека()).Значение.Получить());
			
			УдалитьЗначениеСтека(ПолучитьРазмерСтека());    
			
		КонецЦикла;
		
		ЗначениеСтекаН = ПолучитьЗначениеСтекаПоИндексу(ПолучитьРазмерСтека());   
		
		УдалитьЗначениеСтека(ПолучитьРазмерСтека()); 
		
		Параметры = "";
		
		Если Массив.Количество() > 0 Тогда
			
			Для А = 0 По Массив.Количество() - 1  Цикл 
				
				Параметры = Параметры + "Массив[" + А + "],";
				
			КонецЦикла;  
			
			Параметры = Лев(Параметры, СтрДлина(Параметры) - 1);
			
		КонецЕсли;
		
		Object = Неопределено;   
		
		Выполнить("Object = ЗначениеСтекаН.Значение.Получить(). " + Метод + "(" + Параметры + ");");
		
		ДобавитьВСтек(, Object,,,,, Шаг);  
		
	ИначеЕсли ОпКод = 22 Тогда // "Конец блока (процедуры, модуля)" 
		
		ЗафиксироватьТранзакцию();
		
		Возврат Новый Структура("Результат, Шаг", Ложь, -1);
		
	ИначеЕсли ОпКод = 23 Тогда // "Операция - "   
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтекаВ = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УстановитьЗначениеПамяти(ЗначениеСтекаВ, ЗначениеСтекаВ.Значение.Получить() * (-1));
		
	ИначеЕсли ОпКод = 24 Тогда // "Операция +" 
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтекаВ = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтекаН = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УстановитьЗначениеПамяти(ЗначениеСтекаН, ЗначениеСтекаВ.Значение.Получить() + ЗначениеСтекаН.Значение.Получить());
		
	ИначеЕсли ОпКод = 25 Тогда // "Операция -"  
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтекаВ = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтекаН = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УстановитьЗначениеПамяти(ЗначениеСтекаН, ЗначениеСтекаВ.Значение.Получить() - ЗначениеСтекаН.Значение.Получить());
		
	ИначеЕсли ОпКод = 26 Тогда // "Операция *"
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтекаВ = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтекаН = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УстановитьЗначениеПамяти(ЗначениеСтекаН, ЗначениеСтекаВ.Значение.Получить() * ЗначениеСтекаН.Значение.Получить());
		
	ИначеЕсли ОпКод = 27 Тогда // "Операция /"
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтекаВ = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтекаН = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УстановитьЗначениеПамяти(ЗначениеСтекаН, ЗначениеСтекаВ.Значение.Получить() / ЗначениеСтекаН.Значение.Получить());
		
	ИначеЕсли ОпКод = 28 Тогда // "Операция %"
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтекаВ = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтекаН = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УстановитьЗначениеПамяти(ЗначениеСтекаН, ЗначениеСтекаВ.Значение.Получить() % ЗначениеСтекаН.Значение.Получить());
		
	ИначеЕсли ОпКод = 29 Тогда // "Операция НЕ"
	ИначеЕсли ОпКод = 30 Тогда // "Операция И. Если операнд на вершине стека Ложь, то происходит переход по адресу, указаному во втором параметре, т.е. пропуск вычисления второго операнда, т.к. от него уже ничего не зависит. Из стека при этом значение не удаляется (результатом операции является Ложь). Иначе, если на вершине стека Истина, из стека удаляется значение и перехода не происходит, т.е. вычисляется второй операнд, результат которого полностью определяет результат всей операции)"
	ИначеЕсли ОпКод = 31 Тогда // "Операция ИЛИ. Если операнд на вершине стека Истина, то происходит переход по адресу, указаному во втором параметре, т.е. пропуск вычисления второго операнда, т.к. от него уже ничего не зависит. Из стека при этом значение не удаляется (результатом операции является Истина). Иначе, если на вершине стека Ложь, из стека удаляется значение и перехода не происходит, т.е. вычисляется второй операнд, результат которого полностью определяет результат всей операции)"
	ИначеЕсли ОпКод = 32 Тогда // "unknown2"
	ИначеЕсли ОпКод = 33 Тогда // "Операция = (сравнение)"
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтекаВ = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтекаН = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);   
		
		ДобавитьВСтек(, ЗначениеСтекаВ.Значение.Получить() = ЗначениеСтекаН.Значение.Получить(),,,,, Шаг);  
		
	ИначеЕсли ОпКод = 34 Тогда // "Операция <>"
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтекаВ = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтекаН = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);   
		
		ДобавитьВСтек(, ЗначениеСтекаВ.Значение.Получить() <> ЗначениеСтекаН.Значение.Получить(),,,,, Шаг);  
		
	ИначеЕсли ОпКод = 35 Тогда // "Операция >"
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтекаВ = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтекаН = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);   
		
		ДобавитьВСтек(, ЗначениеСтекаВ.Значение.Получить() > ЗначениеСтекаН.Значение.Получить(),,,,, Шаг);  
		
	ИначеЕсли ОпКод = 36 Тогда // "Операция <"
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтекаВ = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтекаН = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);   
		
		ДобавитьВСтек(, ЗначениеСтекаВ.Значение.Получить() < ЗначениеСтекаН.Значение.Получить(),,,,, Шаг);  
		
	ИначеЕсли ОпКод = 37 Тогда // "Операция >="
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтекаВ = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтекаН = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);   
		
		ДобавитьВСтек(, ЗначениеСтекаВ.Значение.Получить() >= ЗначениеСтекаН.Значение.Получить(),,,,, Шаг);  
		
	ИначеЕсли ОпКод = 38 Тогда // "Операция <="
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтекаВ = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтекаН = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);   
		
		ДобавитьВСтек(, ЗначениеСтекаВ.Значение.Получить() <= ЗначениеСтекаН.Значение.Получить(),,,,, Шаг);  
		
	ИначеЕсли ОпКод = 39 Тогда // "Переход на заданный шаг"
		
		ЗафиксироватьТранзакцию();
		
		Возврат Новый Структура("Результат, Шаг", Истина, Операнд + 1);
		
	ИначеЕсли ОпКод = 40 Тогда // "Переход, если Ложь"  
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтекаВ = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);   
		
		Если ЗначениеСтекаВ.Значение.Получить() = Ложь Тогда
			
			ЗафиксироватьТранзакцию();
			
			Возврат Новый Структура("Результат, Шаг", Истина, Операнд + 1);
			
		КонецЕсли;
		
	ИначеЕсли ОпКод = 41 Тогда // "Переход, если Истина"
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтекаВ = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);   
		
		Если ЗначениеСтекаВ.Значение.Получить() = Истина Тогда
			
			ЗафиксироватьТранзакцию();
			
			Возврат Новый Структура("Результат, Шаг", Истина, Операнд + 1);
			
		КонецЕсли;
		
	ИначеЕсли ОпКод = 42 Тогда // "Перейти"  
		
		ЗафиксироватьТранзакцию();
		
		Возврат Новый Структура("Результат, Шаг", Истина, ПолучитьАдресМетки(Операнд + 1, Перечисления.ТипМетки.Глобальная) + 1);
		
	ИначеЕсли ОпКод = 43 Тогда // "Инкремент"   
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтекаВ = ПолучитьЗначениеСтекаПоИндексу(Размер);  
		
		УдалитьЗначениеСтека(Размер);   
		
		Memory = РегистрыСведений.Memory.СоздатьМенеджерЗаписи();
		
		Значение = ЗначениеСтекаВ.Значение.Получить() + 1;
		
		ЗаполнитьЗначенияСвойств(Memory, ЗначениеСтекаВ);   
		
		Memory.Строка = 0;                                   
		
		Memory.Значение = Новый ХранилищеЗначения(Значение); 
		
		Memory.Записать(Истина);  
		
	ИначеЕсли ОпКод = 44 Тогда // "Попытка"
	ИначеЕсли ОпКод = 45 Тогда // "Завершение блока (Процедура, Функция, Попытка) без ошибки (Возврат или Исключение)"
		
		//PROC.Удалить(PROC.Количество() - 1);
		
		//ВывестиТекстМодуля("КонецФункции", Ложь);
		
	ИначеЕсли ОпКод = 46 Тогда // "КонецПопытки (конец обработки ошибки)"
	ИначеЕсли ОпКод = 47 Тогда // "ВызватьИсключение"
	ИначеЕсли ОпКод = 48 Тогда // "Создать на стеке временных переменных временную переменную"    
		
		ДобавитьВСтекTMP();
		
	ИначеЕсли ОпКод = 49 Тогда // "Загрузить в стек временную переменную из стека временных переменных"
		
		ЗначениеСтекаTMP = ПолучитьЗначениеСтекаTMPПоИндексу(ПолучитьРазмерСтекаTMP());   
		
		//УдалитьЗначениеСтекаTMP(ПолучитьРазмерСтекаTMP()); 
		
		ДобавитьВСтек(ЗначениеСтекаTMP.Адрес, ЗначениеСтекаTMP,, ЗначениеСтекаTMP.Тип, Истина,, Шаг);  
		
	ИначеЕсли ОпКод = 50 Тогда // "Удалить из стека временных переменных временную переменную"
		
		УдалитьЗначениеСтекаTMP(ПолучитьРазмерСтекаTMP()); 
		
	ИначеЕсли ОпКод = 51 Тогда // "Новый"
		
		Object = Неопределено;
		
		НовыйОбъект = ПолучитьЗначениеКонстантыПоНомеру(Операнд + 1);   
		
		Размер = ПолучитьРазмерСтека(); 
		
		КоличествоАргументов = ПолучитьЗначениеСтекаПоИндексу(Размер).Значение.Получить();   
		
		УдалитьЗначениеСтека(Размер); 
		
		Аргументы = "";
		
		Если КоличествоАргументов > 0 Тогда 
			
			Размер = ПолучитьРазмерСтека(); 
			
			Для А = 1 По КоличествоАргументов Цикл  
				
				Размер = ПолучитьРазмерСтека(); 
				
				Аргументы = Аргументы + Строка(ПолучитьЗначениеСтекаПоИндексу(Размер).Значение.Получить()) + ",";
				
				УдалитьЗначениеСтека(Размер); 
				
			КонецЦикла;
			
			Аргументы = Лев(Аргументы, СтрДлина(Аргументы) - 1);
			
		КонецЕсли;
		
		Выполнить("Object = Новый " + НовыйОбъект + "(" + Аргументы + ");");
		
		ДобавитьВСтек(, Object,,,,, Шаг);  
		
	ИначеЕсли ОпКод = 52 Тогда // "Выполнить"
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтека = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер); 
		
		//Выполнить(ЗначениеСтека.Значение);
		
	ИначеЕсли ОпКод = 53 Тогда // "СтрДлина"  
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтека = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		ДобавитьВСтек(, СтрДлина(ЗначениеСтека.Значение.Получить()),,,,, Шаг);  
		
	ИначеЕсли ОпКод = 54 Тогда // "СокрЛ"
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтека = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		ДобавитьВСтек(, СокрЛ(ЗначениеСтека.Значение.Получить()),,,,, Шаг);  
		
	ИначеЕсли ОпКод = 55 Тогда // "СокрП"
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтека = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		ДобавитьВСтек(, СокрП(ЗначениеСтека.Значение.Получить()),,,,, Шаг);  
		
	ИначеЕсли ОпКод = 56 Тогда // "СокрЛП"
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтека = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		ДобавитьВСтек(, СокрЛП(ЗначениеСтека.Значение.Получить()),,,,, Шаг);  
		
	ИначеЕсли ОпКод = 57 Тогда // "Лев" 
		
		//НижнийАдрес	 = Stack.Получить(Stack.Количество() - 1);
		//ВерхнийАдрес = Stack.Получить(Stack.Количество() - 2);  
		//
		//НижнееЗначение	 = ПолучитьЗначениеПамятиПоАдресу(НижнийАдрес.Адрес, НижнийАдрес);
		//ВерхнееЗначение	 = ПолучитьЗначениеПамятиПоАдресу(ВерхнийАдрес.Адрес, НижнийАдрес);
		//
		//Stack.Удалить(Stack.Количество() - 1);
		//Stack.Удалить(Stack.Количество() - 1);
		//
		//ДобавитьВСтек(, Лев(ВерхнееЗначение, НижнееЗначение));
		
	ИначеЕсли ОпКод = 58 Тогда // "Прав"
		
		//НижнийАдрес	 = Stack.Получить(Stack.Количество() - 1);
		//ВерхнийАдрес = Stack.Получить(Stack.Количество() - 2);  
		//
		//НижнееЗначение	 = ПолучитьЗначениеПамятиПоАдресу(НижнийАдрес.Адрес, НижнийАдрес);
		//ВерхнееЗначение	 = ПолучитьЗначениеПамятиПоАдресу(ВерхнийАдрес.Адрес, НижнийАдрес);
		//
		//Stack.Удалить(Stack.Количество() - 1);
		//Stack.Удалить(Stack.Количество() - 1);
		//
		//ДобавитьВСтек(, Прав(ВерхнееЗначение, НижнееЗначение));
		
	ИначеЕсли ОпКод = 59 Тогда // "Сред"
		
		//НижнийАдрес	 = Stack.Получить(Stack.Количество() - 1);
		//ВерхнийАдрес = Stack.Получить(Stack.Количество() - 2);  
		//ВерхнийАдрес1 = Stack.Получить(Stack.Количество() - 3);  
		//
		//НижнееЗначение	 = ПолучитьЗначениеПамятиПоАдресу(НижнийАдрес.Адрес, НижнийАдрес);
		//ВерхнееЗначение	 = ПолучитьЗначениеПамятиПоАдресу(ВерхнийАдрес.Адрес, НижнийАдрес);
		//ВерхнееЗначение1 = ПолучитьЗначениеПамятиПоАдресу(ВерхнийАдрес1.Адрес, НижнийАдрес);
		//
		//Stack.Удалить(Stack.Количество() - 1);
		//Stack.Удалить(Stack.Количество() - 1);
		//Stack.Удалить(Stack.Количество() - 1);
		//
		//ДобавитьВСтек(, Сред(ВерхнееЗначение1, ВерхнееЗначение, НижнееЗначение));
		
	ИначеЕсли ОпКод = 60 Тогда // "Найти" 
		
		//НижнийАдрес	 = Stack.Получить(Stack.Количество() - 1);
		//ВерхнийАдрес = Stack.Получить(Stack.Количество() - 2);  
		//
		//НижнееЗначение	 = ПолучитьЗначениеПамятиПоАдресу(НижнийАдрес.Адрес, НижнийАдрес);
		//ВерхнееЗначение	 = ПолучитьЗначениеПамятиПоАдресу(ВерхнийАдрес.Адрес, НижнийАдрес);
		//
		//Stack.Удалить(Stack.Количество() - 1);
		//Stack.Удалить(Stack.Количество() - 1);
		//
		//ДобавитьВСтек(, Найти(ВерхнееЗначение, НижнееЗначение));
		
	ИначеЕсли ОпКод = 61 Тогда // "Врег"
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтека = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		ДобавитьВСтек(, Врег(ЗначениеСтека.Значение.Получить()),,,,, Шаг);  
		
	ИначеЕсли ОпКод = 62 Тогда // "Нрег"
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтека = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		ДобавитьВСтек(, Нрег(ЗначениеСтека.Значение.Получить()),,,,, Шаг);  
		
	ИначеЕсли ОпКод = 63 Тогда // "Символ"
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтека = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		ДобавитьВСтек(, Символ(ЗначениеСтека.Значение.Получить()),,,,, Шаг);  
		
	ИначеЕсли ОпКод = 64 Тогда // "КодСимвола"
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтекаВ = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтекаН = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		ДобавитьВСтек(, КодСимвола(ЗначениеСтекаН.Значение.Получить(), ЗначениеСтекаВ.Значение.Получить()),,,,, Шаг);  
		
	ИначеЕсли ОпКод = 65 Тогда // "ПустаяСтрока"
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтека = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		ДобавитьВСтек(, ПустаяСтрока(ЗначениеСтека.Значение.Получить()),,,,, Шаг);  
		
	ИначеЕсли ОпКод = 66 Тогда // "Цел"
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтека = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		ДобавитьВСтек(, Цел(ЗначениеСтека.Значение.Получить()),,,,, Шаг);  
		
	ИначеЕсли ОпКод = 67 Тогда // "Окр"    
		
		//НижнийАдрес	 = Stack.Получить(Stack.Количество() - 1);
		//ВерхнийАдрес = Stack.Получить(Stack.Количество() - 2);  
		//
		//НижнееЗначение	 = ПолучитьЗначениеПамятиПоАдресу(НижнийАдрес.Адрес, НижнийАдрес);
		//ВерхнееЗначение	 = ПолучитьЗначениеПамятиПоАдресу(ВерхнийАдрес.Адрес, ВерхнийАдрес);
		//
		//Stack.Удалить(Stack.Количество() - 1);
		//Stack.Удалить(Stack.Количество() - 1);
		//
		//ДобавитьВСтек(, Окр(ВерхнееЗначение, НижнееЗначение));  
		
	ИначеЕсли ОпКод = 68 Тогда // "Окр"
		
		//НижнийАдрес	 = Stack.Получить(Stack.Количество() - 1);
		//ВерхнийАдрес = Stack.Получить(Stack.Количество() - 2);  
		//ВерхнийАдрес1 = Stack.Получить(Stack.Количество() - 3);  
		//
		//НижнееЗначение	 = ПолучитьЗначениеПамятиПоАдресу(НижнийАдрес.Адрес, НижнийАдрес);
		//ВерхнееЗначение	 = ПолучитьЗначениеПамятиПоАдресу(ВерхнийАдрес.Адрес, ВерхнийАдрес);
		//ВерхнееЗначение1 = ПолучитьЗначениеПамятиПоАдресу(ВерхнийАдрес1.Адрес, ВерхнийАдрес1);
		//
		//Stack.Удалить(Stack.Количество() - 1);
		//Stack.Удалить(Stack.Количество() - 1);
		//Stack.Удалить(Stack.Количество() - 1);
		//
		//ДобавитьВСтек(, Окр(ВерхнееЗначение1, ВерхнееЗначение, НижнееЗначение));
		
	ИначеЕсли ОпКод = 69 Тогда // "Булево"
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтека = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		ДобавитьВСтек(, Булево(ЗначениеСтека.Значение.Получить()),,,,, Шаг);  
		
	ИначеЕсли ОпКод = 70 Тогда // "Число"
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтека = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		ДобавитьВСтек(, Число(ЗначениеСтека.Значение.Получить()),,,,, Шаг);  
		
	ИначеЕсли ОпКод = 71 Тогда // "Строка"
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтека = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		ДобавитьВСтек(, Строка(ЗначениеСтека.Значение.Получить()),,,,, Шаг);  
		
	ИначеЕсли ОпКод = 72 Тогда // "Дата"
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтека = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		ДобавитьВСтек(, Дата(ЗначениеСтека.Значение.Получить()),,,,, Шаг);  
		
	ИначеЕсли ОпКод = 73 Тогда // "Дата"
		
		//НижнийАдрес	 = Stack.Получить(Stack.Количество() - 1);
		//ВерхнийАдрес = Stack.Получить(Stack.Количество() - 2);  
		//ВерхнийАдрес1 = Stack.Получить(Stack.Количество() - 3);  
		//
		//НижнееЗначение	 = ПолучитьЗначениеПамятиПоАдресу(НижнийАдрес.Адрес, НижнийАдрес);
		//ВерхнееЗначение	 = ПолучитьЗначениеПамятиПоАдресу(ВерхнийАдрес.Адрес, ВерхнийАдрес);
		//ВерхнееЗначение1 = ПолучитьЗначениеПамятиПоАдресу(ВерхнийАдрес1.Адрес, ВерхнийАдрес1);
		//
		//Stack.Удалить(Stack.Количество() - 1);
		//Stack.Удалить(Stack.Количество() - 1);
		//Stack.Удалить(Stack.Количество() - 1);
		//
		//ДобавитьВСтек(, Дата(ВерхнееЗначение1, ВерхнееЗначение, НижнееЗначение));
		
	ИначеЕсли ОпКод = 74 Тогда // "Дата"
		
		//НижнийАдрес	 = Stack.Получить(Stack.Количество() - 1);
		//ВерхнийАдрес = Stack.Получить(Stack.Количество() - 2);  
		//ВерхнийАдрес1 = Stack.Получить(Stack.Количество() - 3);  
		//ВерхнийАдрес2 = Stack.Получить(Stack.Количество() - 4);  
		//ВерхнийАдрес3 = Stack.Получить(Stack.Количество() - 5);  
		//ВерхнийАдрес4 = Stack.Получить(Stack.Количество() - 6);  
		//
		//НижнееЗначение	 = ПолучитьЗначениеПамятиПоАдресу(НижнийАдрес.Адрес, НижнийАдрес);
		//ВерхнееЗначение	 = ПолучитьЗначениеПамятиПоАдресу(ВерхнийАдрес.Адрес, ВерхнийАдрес);
		//ВерхнееЗначение1 = ПолучитьЗначениеПамятиПоАдресу(ВерхнийАдрес1.Адрес, ВерхнийАдрес1);
		//ВерхнееЗначение2 = ПолучитьЗначениеПамятиПоАдресу(ВерхнийАдрес2.Адрес, ВерхнийАдрес2);
		//ВерхнееЗначение3 = ПолучитьЗначениеПамятиПоАдресу(ВерхнийАдрес3.Адрес, ВерхнийАдрес3);
		//ВерхнееЗначение4 = ПолучитьЗначениеПамятиПоАдресу(ВерхнийАдрес4.Адрес, ВерхнийАдрес4);
		//
		//Stack.Удалить(Stack.Количество() - 1);
		//Stack.Удалить(Stack.Количество() - 1);
		//Stack.Удалить(Stack.Количество() - 1);
		//Stack.Удалить(Stack.Количество() - 1);
		//Stack.Удалить(Stack.Количество() - 1);
		//Stack.Удалить(Stack.Количество() - 1);
		//
		//ДобавитьВСтек(, Дата(ВерхнееЗначение4, ВерхнееЗначение3, ВерхнееЗначение2, ВерхнееЗначение1, ВерхнееЗначение, НижнееЗначение));
		
	ИначеЕсли ОпКод = 75 Тогда // "ДобавитьМесяц"
		
		//НижнийАдрес	 = Stack.Получить(Stack.Количество() - 1);
		//ВерхнийАдрес = Stack.Получить(Stack.Количество() - 2);  
		//
		//НижнееЗначение	 = ПолучитьЗначениеПамятиПоАдресу(НижнийАдрес.Адрес, НижнийАдрес);
		//ВерхнееЗначение	 = ПолучитьЗначениеПамятиПоАдресу(ВерхнийАдрес.Адрес, ВерхнийАдрес);
		//
		//Stack.Удалить(Stack.Количество() - 1);
		//Stack.Удалить(Stack.Количество() - 1);
		//
		//ДобавитьВСтек(, ДобавитьМесяц(ВерхнееЗначение, НижнееЗначение));  
		
	ИначеЕсли ОпКод = 76 Тогда // "НачалоМесяца"
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтека = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		ДобавитьВСтек(, НачалоМесяца(ЗначениеСтека.Значение.Получить()),,,,, Шаг);  
		
	ИначеЕсли ОпКод = 77 Тогда // "КонецМесяца"
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтека = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		ДобавитьВСтек(, КонецМесяца(ЗначениеСтека.Значение.Получить()),,,,, Шаг);  
		
	ИначеЕсли ОпКод = 78 Тогда // "НачалоКвартала"
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтека = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		ДобавитьВСтек(, НачалоКвартала(ЗначениеСтека.Значение.Получить()),,,,, Шаг);  
		
	ИначеЕсли ОпКод = 79 Тогда // "КонецКвартала"
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтека = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		ДобавитьВСтек(, КонецКвартала(ЗначениеСтека.Значение.Получить()),,,,, Шаг);  
		
	ИначеЕсли ОпКод = 80 Тогда // "НачалоГода"
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтека = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		ДобавитьВСтек(, НачалоГода(ЗначениеСтека.Значение.Получить()),,,,, Шаг);  
		
	ИначеЕсли ОпКод = 81 Тогда // "КонецГода"
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтека = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		ДобавитьВСтек(, КонецГода(ЗначениеСтека.Значение.Получить()),,,,, Шаг);  
		
	ИначеЕсли ОпКод = 82 Тогда // "Год"
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтека = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		ДобавитьВСтек(, Год(ЗначениеСтека.Значение.Получить()),,,,, Шаг);  
		
	ИначеЕсли ОпКод = 83 Тогда // "Месяц"
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтека = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		ДобавитьВСтек(, Месяц(ЗначениеСтека.Значение.Получить()),,,,, Шаг);  
		
	ИначеЕсли ОпКод = 84 Тогда // "День"
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтека = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		ДобавитьВСтек(, День(ЗначениеСтека.Значение.Получить()),,,,, Шаг);  
		
	ИначеЕсли ОпКод = 85 Тогда // "Час"
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтека = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		ДобавитьВСтек(, Час(ЗначениеСтека.Значение.Получить()),,,,, Шаг);  
		
	ИначеЕсли ОпКод = 86 Тогда // "Минута"
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтека = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		ДобавитьВСтек(, Минута(ЗначениеСтека.Значение.Получить()),,,,, Шаг);  
		
	ИначеЕсли ОпКод = 87 Тогда // "Секунда"
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтека = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		ДобавитьВСтек(, Секунда(ЗначениеСтека.Значение.Получить()),,,,, Шаг);  
		
	ИначеЕсли ОпКод = 88 Тогда // "ДеньГода"
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтека = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		ДобавитьВСтек(, ДеньГода(ЗначениеСтека.Значение.Получить()),,,,, Шаг);  
		
	ИначеЕсли ОпКод = 89 Тогда // "НеделяГода"
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтека = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		ДобавитьВСтек(, НеделяГода(ЗначениеСтека.Значение.Получить()),,,,, Шаг);  
		
	ИначеЕсли ОпКод = 90 Тогда // "ДеньНедели"
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтека = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		ДобавитьВСтек(, ДеньНедели(ЗначениеСтека.Значение.Получить()),,,,, Шаг);  
		
	ИначеЕсли ОпКод = 91 Тогда // "НачалоНедели"
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтека = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		ДобавитьВСтек(, НачалоНедели(ЗначениеСтека.Значение.Получить()),,,,, Шаг);  
		
	ИначеЕсли ОпКод = 92 Тогда // "КонецНедели"
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтека = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		ДобавитьВСтек(, КонецНедели(ЗначениеСтека.Значение.Получить()),,,,, Шаг);  
		
	ИначеЕсли ОпКод = 93 Тогда // "НачалоДня"
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтека = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		ДобавитьВСтек(, НачалоДня(ЗначениеСтека.Значение.Получить()),,,,, Шаг);  
		
	ИначеЕсли ОпКод = 94 Тогда // "КонецДня"
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтека = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		ДобавитьВСтек(, КонецДня(ЗначениеСтека.Значение.Получить()),,,,, Шаг);  
		
	ИначеЕсли ОпКод = 95 Тогда // "НачалоЧаса"
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтека = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		ДобавитьВСтек(, НачалоЧаса(ЗначениеСтека.Значение.Получить()),,,,, Шаг);  
		
	ИначеЕсли ОпКод = 96 Тогда // "КонецЧаса"
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтека = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		ДобавитьВСтек(, КонецЧаса(ЗначениеСтека.Значение.Получить()),,,,, Шаг);  
		
	ИначеЕсли ОпКод = 97 Тогда // "НачалоМинуты"
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтека = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		ДобавитьВСтек(, НачалоМинуты(ЗначениеСтека.Значение.Получить()),,,,, Шаг);  
		
	ИначеЕсли ОпКод = 98 Тогда // "КонецМинуты"
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтека = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		ДобавитьВСтек(, КонецМинуты(ЗначениеСтека.Значение.Получить()),,,,, Шаг);  
		
	ИначеЕсли ОпКод = 99 Тогда // "ТекущаяДата"    
		
		ДобавитьВСтек(, ТекущаяДата());
		
	ИначеЕсли ОпКод = 100 Тогда // "СтрЗаменить"
		
		//НижнийАдрес	 = Stack.Получить(Stack.Количество() - 1);
		//ВерхнийАдрес = Stack.Получить(Stack.Количество() - 2);  
		//ВерхнийАдрес1 = Stack.Получить(Stack.Количество() - 3);  
		//
		//НижнееЗначение	 = ПолучитьЗначениеПамятиПоАдресу(НижнийАдрес.Адрес, НижнийАдрес);
		//ВерхнееЗначение	 = ПолучитьЗначениеПамятиПоАдресу(ВерхнийАдрес.Адрес, ВерхнийАдрес);
		//ВерхнееЗначение1 = ПолучитьЗначениеПамятиПоАдресу(ВерхнийАдрес1.Адрес, ВерхнийАдрес1);
		//
		//Stack.Удалить(Stack.Количество() - 1);
		//Stack.Удалить(Stack.Количество() - 1);
		//Stack.Удалить(Stack.Количество() - 1);
		//
		//ДобавитьВСтек(, СтрЗаменить(ВерхнееЗначение1, ВерхнееЗначение, НижнееЗначение));
		
	ИначеЕсли ОпКод = 101 Тогда // "СтрЧислоСтрок"
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтека = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		ДобавитьВСтек(, СтрЧислоСтрок(ЗначениеСтека.Значение.Получить()),,,,, Шаг);  
		
	ИначеЕсли ОпКод = 102 Тогда // "СтрПолучитьСтроку"
		
		//НижнийАдрес	 = Stack.Получить(Stack.Количество() - 1);
		//ВерхнийАдрес = Stack.Получить(Stack.Количество() - 2);  
		//
		//НижнееЗначение	 = ПолучитьЗначениеПамятиПоАдресу(НижнийАдрес.Адрес, НижнийАдрес);
		//ВерхнееЗначение	 = ПолучитьЗначениеПамятиПоАдресу(ВерхнийАдрес.Адрес, ВерхнийАдрес);
		//
		//Stack.Удалить(Stack.Количество() - 1);
		//Stack.Удалить(Stack.Количество() - 1);
		//
		//ДобавитьВСтек(, СтрПолучитьСтроку(ВерхнееЗначение, НижнееЗначение));  
		
	ИначеЕсли ОпКод = 103 Тогда // "Мин"
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтека = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		ДобавитьВСтек(, Мин(ЗначениеСтека.Значение.Получить()),,,,, Шаг);  
		
	ИначеЕсли ОпКод = 104 Тогда // "Макс"
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтека = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		ДобавитьВСтек(, Макс(ЗначениеСтека.Значение.Получить()),,,,, Шаг);  
		
	ИначеЕсли ОпКод = 105 Тогда // "СтрЧислоВхождений"
		
		//НижнийАдрес	 = Stack.Получить(Stack.Количество() - 1);
		//ВерхнийАдрес = Stack.Получить(Stack.Количество() - 2);  
		//
		//НижнееЗначение	 = ПолучитьЗначениеПамятиПоАдресу(НижнийАдрес.Адрес, НижнийАдрес);
		//ВерхнееЗначение	 = ПолучитьЗначениеПамятиПоАдресу(ВерхнийАдрес.Адрес, ВерхнийАдрес);
		//
		//Stack.Удалить(Stack.Количество() - 1);
		//Stack.Удалить(Stack.Количество() - 1);
		//
		//ДобавитьВСтек(, СтрЧислоВхождений(ВерхнееЗначение, НижнееЗначение));  
		
	ИначеЕсли ОпКод = 106 Тогда // "ОписаниеОшибки"
		
		ДобавитьВСтек(, ОписаниеОшибки(),,,,, Шаг);
		
	ИначеЕсли ОпКод = 107 Тогда // "ТипЗнч"
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтека = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		ДобавитьВСтек(, ТипЗнч(ЗначениеСтека.Значение.Получить()),,,,, Шаг);  
		
	ИначеЕсли ОпКод = 108 Тогда // "Тип"
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтека = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		ДобавитьВСтек(, Тип(ЗначениеСтека.Значение.Получить()),,,,, Шаг);  
		
	ИначеЕсли ОпКод = 109 Тогда // "Вычислить"
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтека = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		ДобавитьВСтек(, Вычислить(ЗначениеСтека.Значение.Получить()),,,,, Шаг);  
		
	ИначеЕсли ОпКод = 110 Тогда // "Формат"
		
		//НижнийАдрес	 = Stack.Получить(Stack.Количество() - 1);
		//ВерхнийАдрес = Stack.Получить(Stack.Количество() - 2);  
		//
		//НижнееЗначение	 = ПолучитьЗначениеПамятиПоАдресу(НижнийАдрес.Адрес, НижнийАдрес);
		//ВерхнееЗначение	 = ПолучитьЗначениеПамятиПоАдресу(ВерхнийАдрес.Адрес, ВерхнийАдрес);
		//
		//Stack.Удалить(Stack.Количество() - 1);
		//Stack.Удалить(Stack.Количество() - 1);
		//
		//ДобавитьВСтек(, Формат(ВерхнееЗначение, НижнееЗначение));  
		
	ИначеЕсли ОпКод = 111 Тогда // "Новый"
	ИначеЕсли ОпКод = 112 Тогда // "ACos"
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтека = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		ДобавитьВСтек(, ACos(ЗначениеСтека.Значение.Получить()),,,,, Шаг);  
		
	ИначеЕсли ОпКод = 113 Тогда // "ASin"
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтека = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		ДобавитьВСтек(, ASin(ЗначениеСтека.Значение.Получить()),,,,, Шаг);  
		
	ИначеЕсли ОпКод = 114 Тогда // "ATan"
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтека = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		ДобавитьВСтек(, ATan(ЗначениеСтека.Значение.Получить()),,,,, Шаг);  
		
	ИначеЕсли ОпКод = 115 Тогда // "Cos"
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтека = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		ДобавитьВСтек(, Cos(ЗначениеСтека.Значение.Получить()),,,,, Шаг);  
		
	ИначеЕсли ОпКод = 116 Тогда // "Exp"     
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтека = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		ДобавитьВСтек(, Exp(ЗначениеСтека.Значение.Получить()),,,,, Шаг);  
		
	ИначеЕсли ОпКод = 117 Тогда // "Log"
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтека = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		ДобавитьВСтек(, Log(ЗначениеСтека.Значение.Получить()),,,,, Шаг);  
		
	ИначеЕсли ОпКод = 118 Тогда // "Log10"
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтека = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		ДобавитьВСтек(, Log10(ЗначениеСтека.Значение.Получить()),,,,, Шаг);  
		
	ИначеЕсли ОпКод = 119 Тогда // "Pow"
		
		//НижнийАдрес	 = Stack.Получить(Stack.Количество() - 1);
		//ВерхнийАдрес = Stack.Получить(Stack.Количество() - 2);  
		//
		//НижнееЗначение	 = ПолучитьЗначениеПамятиПоАдресу(НижнийАдрес.Адрес, НижнийАдрес);
		//ВерхнееЗначение	 = ПолучитьЗначениеПамятиПоАдресу(ВерхнийАдрес.Адрес, ВерхнийАдрес);
		//
		//Stack.Удалить(Stack.Количество() - 1);
		//Stack.Удалить(Stack.Количество() - 1);
		//
		//ДобавитьВСтек(, Pow(ВерхнееЗначение, НижнееЗначение));  
		
	ИначеЕсли ОпКод = 120 Тогда // "Sin"
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтека = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		ДобавитьВСтек(, Sin(ЗначениеСтека.Значение.Получить()),,,,, Шаг);  
		
	ИначеЕсли ОпКод = 121 Тогда // "Sqrt"
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтека = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		ДобавитьВСтек(, Sqrt(ЗначениеСтека.Значение.Получить()),,,,, Шаг);  
		
	ИначеЕсли ОпКод = 122 Тогда // "Tan"
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтека = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		ДобавитьВСтек(, Tan(ЗначениеСтека.Значение.Получить()),,,,, Шаг);  
		
	ИначеЕсли ОпКод = 123 Тогда // "ДобавитьОбработчик"
	ИначеЕсли ОпКод = 124 Тогда // "ДобавитьОбработчик"
	ИначеЕсли ОпКод = 125 Тогда // "УдалитьОбработчик"
	ИначеЕсли ОпКод = 126 Тогда // "УдалитьОбработчик"
	ИначеЕсли ОпКод = 127 Тогда // "ТРег"
		
		Размер = ПолучитьРазмерСтека(); 
		
		ЗначениеСтека = ПолучитьЗначениеСтекаПоИндексу(Размер);   
		
		УдалитьЗначениеСтека(Размер);
		
		ДобавитьВСтек(, ТРег(ЗначениеСтека.Значение.Получить()),,,,, Шаг);  
		
	ИначеЕсли ОпКод = 128 Тогда // "ИнформацияОбОшибке"
		
		ДобавитьВСтек(, ИнформацияОбОшибке(),,,,, Шаг);
		
	КонецЕсли;  
	
	ЗафиксироватьТранзакцию();
	
	Возврат Новый Структура("Результат, Шаг", Истина, Шаг + 1);    
	
КонецФункции
//*****************************************************************************************   