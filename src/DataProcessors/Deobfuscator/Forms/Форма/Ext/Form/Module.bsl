//***********************************************************************************************************
&НаКлиенте
Процедура Деобфускация(Команда)    

	ДеобфускацияНаСервере();

	ПоказатьПредупреждение(, "Деобфускация завершена");
	
КонецПроцедуры
//***********************************************************************************************************
&НаСервере
Процедура ДеобфускацияНаСервере()    
	
	МассивПропуска = Новый Массив;
	
	МассивПропуска.Добавить("~");
	МассивПропуска.Добавить("Пока");
	МассивПропуска.Добавить("Перейти");
	МассивПропуска.Добавить("Попытка");
	МассивПропуска.Добавить("Возврат");
	МассивПропуска.Добавить("Функция");
	МассивПропуска.Добавить("Процедура");
	МассивПропуска.Добавить("КонецЕсли");
	МассивПропуска.Добавить("Исключение");
	МассивПропуска.Добавить("КонецЦикла");
	МассивПропуска.Добавить("КонецПопытки");
	МассивПропуска.Добавить("КонецФункции");
	МассивПропуска.Добавить("КонецПроцедуры");
	
	Б = 1;
	
	МассивПеременные = Новый Массив; 
	
	Для А = 0 По 9 Цикл
	
		МассивПеременные.Добавить("_" + Строка(А)); 
	
	КонецЦикла;
	
	Переменные = Новый Соответствие; 
	
	Для А = 0 По МассивПеременные.Количество() - 1 Цикл
		
		Переменные.Вставить(МассивПеременные[А], Неопределено);

		Объект.Данные = СтрЗаменить(Объект.Данные, МассивПеременные[А], "Переменные[""" + МассивПеременные[А] + """]");	
		
	КонецЦикла;
	
	Строки = Новый Соответствие; 
	
	Объект.Результат = "";
	
	ТЗ = Новый ТаблицаЗначений;
	
	ТЗ.Колонки.Добавить("Метка");
	ТЗ.Колонки.Добавить("Строка");
	ТЗ.Колонки.Добавить("Переход");
	ТЗ.Колонки.Добавить("Результат");
	
	Массив = Новый Массив;  
	
	КоличествоСтрок = СтрЧислоСтрок(Объект.Данные);
	
	Для А = 1 По КоличествоСтрок Цикл
		
		ТекущаяСтрока = СокрЛП(СтрПолучитьСтроку(Объект.Данные, А));
		
		Если СтрНайти(ТекущаяСтрока, "Перейти") > 0 Тогда
			НоваяСтрока = ТЗ.Добавить();
			
			НоваяСтрока.Переход = СокрЛП(СтрЗаменить(СтрЗаменить(ТекущаяСтрока, "Перейти", ""), ";", ""));	
			
			Продолжить;
			
		КонецЕсли;
		
		Если СтрНайти(ТекущаяСтрока, "~") > 0 Тогда     
			
			Мас = СтрРазделить(СокрЛП(ТекущаяСтрока), ":");
			
			Для Б = 0 По Мас.Количество() - 1 Цикл  
				
				Если ЗначениеЗаполнено(Мас[Б]) Тогда
					
					НоваяСтрока = ТЗ.Добавить();
					
					НоваяСтрока.Метка = СокрЛП(Мас[Б]);	
					
				КонецЕсли;
				
			КонецЦикла;
			
			Продолжить;
			
		КонецЕсли; 
		
		НоваяСтрока = ТЗ.Добавить();
		
		НоваяСтрока.Строка = ТекущаяСтрока;	
		
	КонецЦикла;	 
	
	Для А = 0 По МассивПеременные.Количество() - 1 Цикл
		
		Для Каждого Стр Из ТЗ Цикл
			
			Стр.Метка	 = СтрЗаменить(Стр.Метка, "Переменные[""" + МассивПеременные[А] + """]", МассивПеременные[А]);	
			Стр.Переход	 = СтрЗаменить(Стр.Переход, "Переменные[""" + МассивПеременные[А] + """]", МассивПеременные[А]);	
			
		КонецЦикла;
		
	КонецЦикла;
	
	Стр = 0;
	
	Пока Истина Цикл 
		
		Если Стр > ТЗ.Количество() - 1 Тогда
			
			Прервать;
			
		КонецЕсли;
		
		ТС = ТЗ.Получить(Стр);  
		
		Если ЗначениеЗаполнено(ТС.Переход) Тогда
			
			НайденнаяСтрока = ТЗ.Найти(ТС.Переход, "Метка");
			
			Если НайденнаяСтрока <> Неопределено Тогда
				
				Стр = ТЗ.Индекс(НайденнаяСтрока) + 1;
				
				Продолжить;
				
			КонецЕсли;   
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТС.Строка) Тогда

			Попытка
				
				Если СтрНайти(ТС.Строка, "Если") > 0 И СтрНайти(ТС.Строка, "Тогда") > 0 Тогда
					
					Переменные.Вставить("Результат_" + Б, Вычислить(СтрЗаменить(СтрЗаменить(ТС.Строка, "Если", ""), "Тогда", "")));  
					
					ТС.Результат = Переменные["Результат_" + Б]; 
					
					Б = Б + 1; 
					
					Если ТС.Результат Тогда
						
						ЗначениеПерехода = ТЗ.Получить(Стр + 1); 
						
						НайденнаяСтрока = ТЗ.Найти(ЗначениеПерехода.Переход, "Метка");
						
						Если НайденнаяСтрока <> Неопределено Тогда
														Стр = ТЗ.Индекс(НайденнаяСтрока) + 1;
							
							Продолжить;
													КонецЕсли;
						
					Иначе
						
						Стр = ТЗ.Индекс(ТС) + 3; 
						
						Продолжить;

					КонецЕсли;
					
				Иначе
					
					Выполнить(ТС.Строка);
					
					Объект.Результат = Объект.Результат + ТС.Строка + Символы.ПС;
					
				КонецЕсли;
				
			Исключение
				
				Объект.Результат = Объект.Результат + ТС.Строка + Символы.ПС;
		
			КонецПопытки;

		КонецЕсли; 
		
		Стр = Стр + 1;
		
	КонецЦикла;

	МассивОперации = Новый Массив; 
	
	МассивОперации.Добавить("=");
	МассивОперации.Добавить(">");
	МассивОперации.Добавить("<");
	МассивОперации.Добавить("<>");
	МассивОперации.Добавить(">=");
	МассивОперации.Добавить("<=");
	МассивОперации.Добавить("НЕ");
	МассивОперации.Добавить("И");
	МассивОперации.Добавить("ИЛИ");

	МассивПаттерны = Новый Массив;  
	
	Для А = 0 По 9 Цикл

		Для Б = 0 По 9 Цикл
			
			Для В = 0 По 9 Цикл  
				
				Для Г = 0 По МассивОперации.Количество() - 1 Цикл  

					МассивПаттерны.Добавить(МассивПеременные[А] + " = " +  МассивПеременные[Б] + " " + МассивОперации[Г] + " " + МассивПеременные[В]); 
					МассивПаттерны.Добавить(МассивПеременные[А] + " = " +  МассивПеременные[Б] + " " + МассивОперации[Г] + " -" + МассивПеременные[В]); 
					МассивПаттерны.Добавить(МассивПеременные[А] + " = -" +  МассивПеременные[Б] + " " + МассивОперации[Г] + " " + МассивПеременные[В]); 
					МассивПаттерны.Добавить(МассивПеременные[А] + " = -" +  МассивПеременные[Б] + " " + МассивОперации[Г] + " -" + МассивПеременные[В]); 

				КонецЦикла;

			КонецЦикла;
				
			МассивПаттерны.Добавить(МассивПеременные[А] + " = " +  МассивПеременные[Б]);
			МассивПаттерны.Добавить(МассивПеременные[А] + " = -" +  МассивПеременные[Б]);
	
		КонецЦикла;
		
		МассивПаттерны.Добавить(МассивПеременные[А] + " = " +  МассивПеременные[А]);  
		
		Для Б = 0 По 9 Цикл
		
			МассивПаттерны.Добавить(МассивПеременные[А] + " = " + Строка(Б));   
		
		КонецЦикла;
		
	КонецЦикла;

	Для А = 0 По МассивПеременные.Количество() - 1 Цикл
		
		Объект.Данные	 = СтрЗаменить(Объект.Данные, "Переменные[""" + МассивПеременные[А] + """]", МассивПеременные[А]);	
		Объект.Результат = СтрЗаменить(Объект.Результат, "Переменные[""" + МассивПеременные[А] + """]", МассивПеременные[А]);	
		
	КонецЦикла;  
	
	Текст = "";   
	
	КоличествоСтрок = СтрЧислоСтрок(Объект.Результат);
	
	Для А = 1 По КоличествоСтрок Цикл 
		
		ТекущаяСтрока = СокрЛП(СтрПолучитьСтроку(Объект.Результат, А));
		
		Добавить = Истина;
		
		Для Б = 0 По МассивПаттерны.Количество() - 1 Цикл
			
			Если ТекущаяСтрока = МассивПаттерны[Б] Тогда
				
				Добавить = Ложь;
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла; 
		
		Если Добавить Тогда
			
			Текст = Текст + ТекущаяСтрока + Символы.ПС;   
			
		КонецЕсли;
		
	КонецЦикла;  

	Массив = СтрРазделить(Текст, Символы.ПС);

	Для А = 0 По Массив.Количество() - 1 Цикл 

		ТекущаяСтрока = Массив[А];
		
		Если СтрНайти(ТекущаяСтрока, "Символ(Число(Сред(") > 0
			И СтрНайти(ТекущаяСтрока, "Число(Символ(КодСимвола(") > 0 Тогда
			
			Результат = "";
			
			Переменная = СокрЛП(Лев(ТекущаяСтрока, СтрНайти(ТекущаяСтрока, "=") - 1));  
			
			ТекстЦикла = ""; 

			ТекстЦикла = ТекстЦикла + Переменная + "= """"" + ";" + Символы.ПС;
			ТекстЦикла = ТекстЦикла + СокрЛП(Массив[А - 2]) + ";" + Символы.ПС;
			ТекстЦикла = ТекстЦикла + СокрЛП(Массив[А - 1]) + Символы.ПС;
			ТекстЦикла = ТекстЦикла + СокрЛП(Массив[А]) + ";" + Символы.ПС;
			ТекстЦикла = ТекстЦикла + СокрЛП(Массив[А + 1]) + ";" + Символы.ПС;
			ТекстЦикла = ТекстЦикла + СокрЛП(Массив[А + 2]) + ";" + Символы.ПС;
			
			ТекстЦикла = ТекстЦикла + "Результат = " + Переменная + ";" + Символы.ПС;
			
			Выполнить(ТекстЦикла);   
			
			Массив[А]		 = "";
			Массив[А - 3]	 = "";
			Массив[А - 2]	 = "";
			Массив[А - 1]	 = "";
			Массив[А + 1]	 = "";
			Массив[А + 2]	 = "";
			
			Массив.Вставить(А - 2, Переменная + " = " + Результат);  

			А = А + 2;  
			
			Продолжить;
			
		КонецЕсли;  

	КонецЦикла;  
	
	НовыйТекст = "";
	
	Объект.Результат = "";

	Для А = 0 По Массив.Количество() - 1 Цикл  
		
		Если ЗначениеЗаполнено(Массив[А]) Тогда
		
			НовыйТекст = НовыйТекст + Массив[А] + Символы.ПС;  
		
		КонецЕсли;
		
	КонецЦикла;  

	Объект.Результат = НовыйТекст;

КонецПроцедуры
//***********************************************************************************************************
&НаСервере
Процедура ПроектПриИзмененииНаСервере()
	
	Элементы.Файл.СписокВыбора.Очистить();
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ПроектыФайлы.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Проекты.Файлы КАК ПроектыФайлы");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл     
		
		Элементы.Файл.СписокВыбора.Добавить(Выборка.Наименование, Выборка.Наименование);
		
	КонецЦикла;

КонецПроцедуры
//***********************************************************************************************************
&НаКлиенте
Процедура ПроектПриИзменении(Элемент)

	ПроектПриИзмененииНаСервере();

КонецПроцедуры
//***********************************************************************************************************
&НаСервере
Процедура ФайлПриИзмененииНаСервере()
	
	Элементы.ФункцияПроцедура.СписокВыбора.Очистить();
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ПроцедурыФункции.Адрес КАК Адрес,
	|	ПроцедурыФункции.Наименование КАК Наименование,
	|	ПроцедурыФункции.ЭтоФункция КАК ЭтоФункция,
	|	ПроцедурыФункции.ЭтоПроцедура КАК ЭтоПроцедура,
	|	ПроцедурыФункции.Экспортная КАК Экспортная,
	|	ПроцедурыФункции.Параметры КАК Параметры
	|ИЗ
	|	РегистрСведений.ПроцедурыФункции КАК ПроцедурыФункции
	|ГДЕ
	|	ПроцедурыФункции.Проект = &Проект
	|	И ПроцедурыФункции.Файл = &Файл
	|	И (ПроцедурыФункции.Тип <> 32
	|			И ПроцедурыФункции.Тип <> 33)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование
	|АВТОУПОРЯДОЧИВАНИЕ");
	
	Запрос.УстановитьПараметр("Файл",	 Объект.Файл);
	Запрос.УстановитьПараметр("Проект",	 Объект.Проект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Элементы.ФункцияПроцедура.СписокВыбора.Добавить(Выборка.Адрес, Выборка.Наименование);
		
	КонецЦикла; 

КонецПроцедуры
//***********************************************************************************************************
&НаКлиенте
Процедура ФайлПриИзменении(Элемент)

	ФайлПриИзмененииНаСервере();

КонецПроцедуры
//***********************************************************************************************************
&НаСервере
Процедура ФункцияПроцедураПриИзмененииНаСервере()
	
	Объект.Данные	 = ""; 
	Объект.Результат = ""; 
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ПроектыФункцииПроцедуры.Текст КАК Текст
	|ИЗ
	|	Справочник.Проекты.ФункцииПроцедуры КАК ПроектыФункцииПроцедуры
	|ГДЕ
	|	ПроектыФункцииПроцедуры.Ссылка = &Ссылка
	|	И ПроектыФункцииПроцедуры.Адрес = &Адрес
	|	И ПроектыФункцииПроцедуры.Файл ПОДОБНО &Файл");
	
	Запрос.УстановитьПараметр("Файл",	 Объект.Файл);
	Запрос.УстановитьПараметр("Адрес",	 Число(Объект.ФункцияПроцедура));
	Запрос.УстановитьПараметр("Ссылка",	 Объект.Проект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Объект.Данные = Выборка.Текст; 
		
	КонецЕсли;
	
КонецПроцедуры
//***********************************************************************************************************
&НаКлиенте
Процедура ФункцияПроцедураПриИзменении(Элемент)

	ФункцияПроцедураПриИзмененииНаСервере();

КонецПроцедуры
//***********************************************************************************************************
