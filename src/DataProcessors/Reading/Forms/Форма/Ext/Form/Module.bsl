//*****************************************************************************************
&НаСервере
Процедура ОбновитьДанные()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ПроцедурыФункции.Адрес КАК Адрес,
	|	ПроцедурыФункции.Наименование КАК Наименование,
	|	ПроцедурыФункции.ЭтоФункция КАК ЭтоФункция,
	|	ПроцедурыФункции.ЭтоПроцедура КАК ЭтоПроцедура,
	|	ПроцедурыФункции.Экспортная КАК Экспортная,
	|	ПроцедурыФункции.Параметры КАК Параметры
	|ИЗ
	|	РегистрСведений.ПроцедурыФункции КАК ПроцедурыФункции
	|ГДЕ
	|	ПроцедурыФункции.Проект = &Проект
	|	И ПроцедурыФункции.Файл = &Файл
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование
	|АВТОУПОРЯДОЧИВАНИЕ");
	
	Запрос.УстановитьПараметр("Файл",	 Объект.Файл);
	Запрос.УстановитьПараметр("Проект",	 Объект.Проект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Элементы.ПроцедурыФункции.СписокВыбора.Добавить(Выборка.Адрес, Выборка.Наименование);

	КонецЦикла; 
	
	Code.Параметры.УстановитьЗначениеПараметра("Файл",	 Объект.Файл);
	Code.Параметры.УстановитьЗначениеПараметра("Проект", Объект.Проект);
	
КонецПроцедуры
//*****************************************************************************************
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбновитьДанные();
	
КонецПроцедуры
//*****************************************************************************************
&НаСервере
Функция NextНаСервере()
	
	Возврат РегистрыСведений.Code.СоздатьКлючЗаписи(Новый Структура("Строка", Объект.CurrentPoin));
	
КонецФункции
//*****************************************************************************************
&НаСервере
Функция УстановитьЗначение(Описание, ОперацияОпКода, КоличествоПараметров) 
	
	Если КоличествоПараметров > 0 Тогда
		
		Массив = Новый Массив;
		
		А = КоличествоПараметров - 1;
		
		Пока А >= 0 Цикл 
			
			Массив.Добавить(СокрЛП(СтрПолучитьСтроку(Объект.Text, СтрЧислоСтрок(Объект.Text) - А))); 
			
			А = А - 1;
			
		КонецЦикла; 
		
		Временная = "";  
		
		ПараметрыВыполнения = "";
		
		Для А = 0 По Массив.Количество() - 1 Цикл  
			
			ПараметрыВыполнения = ПараметрыВыполнения + """" + Строка(Массив[А]) + """" + ", "; 
			
		КонецЦикла; 
		
		ПараметрыВыполнения = Лев(ПараметрыВыполнения, СтрДлина(ПараметрыВыполнения) - 2);
		
		Выполнить("Временная = СтрШаблон(ОперацияОпКода, " + ПараметрыВыполнения + ");");
		
		Текст = "";
		
		Для А = 0 По СтрЧислоСтрок(Объект.Text) - КоличествоПараметров Цикл
			
			Текст = Текст + СокрЛП(СтрПолучитьСтроку(Объект.Text, А)) + Символы.ПС;
			
		КонецЦикла;  
		
		Объект.Text = "";
		
		Объект.Text = СокрЛП(Текст) + ?(СтрДлина(Текст) > 0, Символы.ПС, "") + СокрЛП(Временная) + Символы.ПС; 
		
	Иначе
		
		Объект.Text = Объект.Text + ОперацияОпКода + Символы.ПС; 
		
	КонецЕсли;
	
	Возврат Описание;

КонецФункции
//*****************************************************************************************
&НаСервере
Функция ПолучитьОписание(opCode, Operand, Адрес)
	
	Если opCode = 1 Тогда 

		Объект.Text = Объект.Text + ";" + Символы.ПС;          
		
	ИначеЕсли opCode = 2 Тогда 
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	Memory.Наименование КАК Наименование,
		|	Memory.Пропускать КАК Пропускать
		|ИЗ
		|	РегистрСведений.Memory КАК Memory
		|ГДЕ
		|	Memory.Адрес = &Адрес
		|	И Memory.Проект = &Проект
		|	И Memory.Файл = &Файл");
		
		Запрос.УстановитьПараметр("Файл",	 Объект.Файл);
		Запрос.УстановитьПараметр("Адрес",	 Адрес);
		Запрос.УстановитьПараметр("Проект",	 Объект.Проект);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			Переменная = СокрЛП(Выборка.Наименование);
			
			Если НЕ Выборка.Пропускать Тогда 
				
				Объект.Text = Объект.Text + " " + СокрЛП(Переменная) + Символы.ПС;          
				
			КонецЕсли;
			
			Возврат Переменная;
			
		КонецЕсли; 
		
	ИначеЕсли opCode = 3 Тогда  
		
		Если ЗначениеЗаполнено(Элементы.ПФ.Заголовок) Тогда 
			
			Адрес = "-1";
			
			Для А = 0 По Элементы.ПроцедурыФункции.СписокВыбора.Количество() - 1 Цикл 
				
				Если СокрЛП(Элементы.ПроцедурыФункции.СписокВыбора.Получить(А).Представление) = СокрЛП(Элементы.ПФ.Заголовок) Тогда 
					
					Адрес = Элементы.ПроцедурыФункции.СписокВыбора.Получить(А).Значение;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Запрос = Новый Запрос("ВЫБРАТЬ
			|	ЗначенияПроцедурФункций.Значение КАК Значение
			|ИЗ
			|	РегистрСведений.ЗначенияПроцедурФункций КАК ЗначенияПроцедурФункций
			|ГДЕ
			|	ЗначенияПроцедурФункций.Тип = ЗНАЧЕНИЕ(Перечисление.ТипЗначенияПроцедурыФункции.Var)
			|	И ЗначенияПроцедурФункций.Адрес = &Адрес
			|	И ЗначенияПроцедурФункций.Номер = &Номер
			|	И ЗначенияПроцедурФункций.Проект = &Проект
			|	И ЗначенияПроцедурФункций.Файл = &Файл");
			
			Запрос.УстановитьПараметр("Файл",	 Объект.Файл);
			Запрос.УстановитьПараметр("Адрес",	 Адрес);
			Запрос.УстановитьПараметр("Номер",	 Operand);
			Запрос.УстановитьПараметр("Проект",	 Объект.Проект);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда 
				
				Переменная = СокрЛП(Выборка.Значение);  
				
				Объект.Text = Объект.Text + " " + СокрЛП(Переменная) + Символы.ПС;
				
				Возврат Переменная; 
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли opCode = 4 Тогда 
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	Memory.Значение КАК Значение
		|ИЗ
		|	РегистрСведений.Memory КАК Memory
		|ГДЕ
		|	Memory.Адрес = &Адрес
		|	И Memory.Проект = &Проект
		|	И Memory.Файл = &Файл");
		
		Запрос.УстановитьПараметр("Файл",	 Объект.Файл);
		Запрос.УстановитьПараметр("Адрес",	 Адрес);
		Запрос.УстановитьПараметр("Проект",	 Объект.Проект);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда 
			
			Переменная = СокрЛП(Выборка.Значение.Получить());  
			
			Объект.Text = Объект.Text + " " + СокрЛП(Переменная) + Символы.ПС;
			
			Возврат Переменная;
			
		КонецЕсли; 
		
	ИначеЕсли opCode = 5 Тогда // "Загрузить на стек результат последней функции/метода"
		
		Возврат "Загрузить на стек результат последней функции/метода";
		
	ИначеЕсли opCode = 6 Тогда // "Загрузить на стек Ложь" 
		
		Объект.Text = Объект.Text + "Ложь" + Символы.ПС;
		
		Возврат "Ложь";
		
	ИначеЕсли opCode = 7 Тогда // "Загрузить на стек Истина"
		
		Объект.Text = Объект.Text + "Истина" + Символы.ПС;
		
		Возврат "Истина";
		
	ИначеЕсли opCode = 8 Тогда // "Загрузить на стек Неопределено"
		
		Объект.Text = Объект.Text + "Неопределено" + Символы.ПС;
		
		Возврат "Неопределено";
		
	ИначеЕсли opCode = 9 Тогда // "Загрузить на стек Null"
		
		Объект.Text = Объект.Text + "Null" + Символы.ПС;
		
		Возврат "Null";
		
	ИначеЕсли opCode = 10 Тогда // "Загрузить на стек пустое значение"

		Объект.Text = Объект.Text + "" + Символы.ПС;
	
		Возврат "Пустое значение";
		
	ИначеЕсли opCode = 11 Тогда // "Удалить значение из стека"
		
		Возврат "Удалить значение из стека";
		
	ИначеЕсли opCode = 12 Тогда // Получение свойства .<Имя Свойства> 
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	Memory.Значение КАК Значение
		|ИЗ
		|	РегистрСведений.Memory КАК Memory
		|ГДЕ
		|	Memory.Адрес = &Адрес
		|	И Memory.Проект = &Проект
		|	И Memory.Файл = &Файл");
		
		Запрос.УстановитьПараметр("Файл",	 Объект.Файл);
		Запрос.УстановитьПараметр("Адрес",	 Адрес);
		Запрос.УстановитьПараметр("Проект",	 Объект.Проект);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда 

			Возврат УстановитьЗначение("Получение свойства .<Имя Свойства>", "%1." + СокрЛП(Выборка.Значение.Получить()), 1);

		КонецЕсли; 
		
	ИначеЕсли opCode = 13 Тогда // "Получение элемента массива []" 

		Возврат УстановитьЗначение("Получение элемента массива []", "%1[%2]", 2);
		
	ИначеЕсли opCode = 14 Тогда // "Получить из коллекции выборку"
		
		Возврат "Получить из коллекции выборку";
		
	ИначеЕсли opCode = 15 Тогда // "Получить из выборки очередной элемент коллекции. Этот элемент попадает в переменную, которая была на вершине стека, а в стек вместо этой переменной помещается результат успешности (Истина - получили очередной элемент, Ложь - нет)"
		
		Возврат "Получить из выборки очередной элемент коллекции";
		
	ИначеЕсли opCode = 16 Тогда 

		Возврат УстановитьЗначение("=", "%1 = %2;", 2);

	ИначеЕсли opCode = 17 Тогда // "Возврат (установить результат функции/метода)"		

		Возврат УстановитьЗначение("Возврат", "Возврат %1;", 1);

	ИначеЕсли opCode = 18 Тогда // "Указание количества используемых параметров в следующем вызове (метода, функции)"
		
		Объект.Count = Operand;
		
		Возврат "Указание количества используемых параметров в следующем вызове (метода, функции)";
		
	ИначеЕсли opCode = 19 Тогда // "Вызов локальной процедуры или функции"
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ПроцедурыФункции.Наименование КАК Наименование
		|ИЗ
		|	РегистрСведений.ПроцедурыФункции КАК ПроцедурыФункции
		|ГДЕ
		|	ПроцедурыФункции.Номер = &Номер
		|	И ПроцедурыФункции.Проект = &Проект
		|	И ПроцедурыФункции.Файл = &Файл");
		
		Запрос.УстановитьПараметр("Файл",	 Объект.Файл);
		Запрос.УстановитьПараметр("Номер",	 Operand);
		Запрос.УстановитьПараметр("Проект",	 Объект.Проект);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда 
			
			ПроцедураФункция = СокрЛП(Выборка.Наименование);

			Переменные = "";
			
			Количество = Объект.Count;  
			
			Для А = 1 По Количество Цикл
				
				Переменные = Переменные + "%" + А + ", ";
				
			КонецЦикла;
			
			Переменные = Лев(Переменные, СтрДлина(Переменные) - 2);
			
			Объект.Count = -1;

			Возврат УстановитьЗначение("Вызов локальной процедуры или функции - " + ПроцедураФункция, ПроцедураФункция + "(" + Переменные + ")", Количество);
	
		КонецЕсли;
		
	ИначеЕсли opCode = 20 Тогда // "Выполнение метода .<Имя метода>() (являющегося процедурой, т.е. без возврата значения)"  
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	Memory.Значение КАК Значение
		|ИЗ
		|	РегистрСведений.Memory КАК Memory
		|ГДЕ
		|	Memory.Адрес = &Адрес
		|	И Memory.Проект = &Проект
		|	И Memory.Файл = &Файл");
		
		Запрос.УстановитьПараметр("Файл",	 Объект.Файл);
		Запрос.УстановитьПараметр("Адрес",	 Адрес);
		Запрос.УстановитьПараметр("Проект",	 Объект.Проект);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда 
			
			НаименованиеМетода = СокрЛП(Выборка.Значение.Получить());

			Переменные = "";
			
			Количество = Объект.Count;  
			
			Для А = 2 По Количество + 1 Цикл
				
				Переменные = Переменные + "%" + А + ", ";
				
			КонецЦикла;
			
			Переменные = Лев(Переменные, СтрДлина(Переменные) - 2);
			
			Объект.Count = -1;

			Возврат УстановитьЗначение("Выполнение метода .<Имя метода>() - " + НаименованиеМетода, "%1." + НаименованиеМетода + "(" + Переменные + ")", Количество + 1);
	
		КонецЕсли; 
		
	ИначеЕсли opCode = 21 Тогда // "Выполнение метода .<Имя метода>() (являющегося функцией, т.е. возвращающий значение)"
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	Memory.Значение КАК Значение
		|ИЗ
		|	РегистрСведений.Memory КАК Memory
		|ГДЕ
		|	Memory.Адрес = &Адрес
		|	И Memory.Проект = &Проект
		|	И Memory.Файл = &Файл");
		
		Запрос.УстановитьПараметр("Файл",	 Объект.Файл);
		Запрос.УстановитьПараметр("Адрес",	 Адрес);
		Запрос.УстановитьПараметр("Проект",	 Объект.Проект);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда 
			
			НаименованиеМетода = СокрЛП(Выборка.Значение.Получить());

			Переменные = "";
			
			Количество = Объект.Count;  
			
			Для А = 2 По Количество + 1 Цикл
				
				Переменные = Переменные + "%" + А + ", ";
				
			КонецЦикла;
			
			Переменные = Лев(Переменные, СтрДлина(Переменные) - 2);
			
			Объект.Count = -1;

			Возврат УстановитьЗначение("Выполнение метода .<Имя метода>() - " + НаименованиеМетода, "%1." + НаименованиеМетода + "(" + Переменные + ")", Количество + 1);
	
		КонецЕсли; 
		
	ИначеЕсли opCode = 22 Тогда // "Конец блока (процедуры, модуля)" 

		Если ЗначениеЗаполнено(Элементы.ПФ.Заголовок) Тогда
			
			Если ЭтоПроцедура Тогда
				
				Возврат УстановитьЗначение("Конец блока (процедуры, модуля)", "КонецПроцедуры", 0);
			
			ИначеЕсли ЭтоФункция Тогда
			
				Возврат УстановитьЗначение("Конец блока (процедуры, модуля)", "КонецФункции", 0); 
			
			КонецЕсли;

		КонецЕсли;

	ИначеЕсли opCode = 23 Тогда // "Операция -"   

		Возврат УстановитьЗначение("Операция -", "-%1", 1);

	ИначеЕсли opCode = 24 Тогда // "Операция +" 

		Возврат УстановитьЗначение("Операция +", "%1 + %2", 2);
		
	ИначеЕсли opCode = 25 Тогда // "Операция -"  

		Возврат УстановитьЗначение("Операция -", "%1 - %2", 2);
		
	ИначеЕсли opCode = 26 Тогда // "Операция *"

		Возврат УстановитьЗначение("Операция *", "%1 * %2", 2);
		
	ИначеЕсли opCode = 27 Тогда // "Операция /"

		Возврат УстановитьЗначение("Операция /", "%1 / %2", 2);
		
	ИначеЕсли opCode = 28 Тогда // "Операция %"

		Возврат УстановитьЗначение("Операция %", "%1 % %2", 2);
		
	ИначеЕсли opCode = 29 Тогда // "Операция НЕ"

		Текст = "
		|Если НЕ %1 Тогда
		|
		|Иначе
		|
		|КонецЕсли;"; 
		
		Возврат УстановитьЗначение("Операция НЕ", Текст, 1);

	ИначеЕсли opCode = 30 Тогда // "Операция И. Если операнд на вершине стека Ложь, то происходит переход по адресу, указаному во втором параметре, т.е. пропуск вычисления второго операнда, т.к. от него уже ничего не зависит. Из стека при этом значение не удаляется (результатом операции является Ложь). Иначе, если на вершине стека Истина, из стека удаляется значение и перехода не происходит, т.е. вычисляется второй операнд, результат которого полностью определяет результат всей операции)"

		Текст = "
		|Если %1 И %2 Тогда
		|
		|Иначе
		|
		|КонецЕсли;"; 
		
		Возврат УстановитьЗначение("Операция И", Текст, 2);

	ИначеЕсли opCode = 31 Тогда // "Операция ИЛИ. Если операнд на вершине стека Истина, то происходит переход по адресу, указаному во втором параметре, т.е. пропуск вычисления второго операнда, т.к. от него уже ничего не зависит. Из стека при этом значение не удаляется (результатом операции является Истина). Иначе, если на вершине стека Ложь, из стека удаляется значение и перехода не происходит, т.е. вычисляется второй операнд, результат которого полностью определяет результат всей операции)"

		Текст = "
		|Если %1 ИЛИ %2 Тогда
		|
		|Иначе
		|
		|КонецЕсли;"; 
		
		Возврат УстановитьЗначение("Операция И", Текст, 2);

	ИначеЕсли opCode = 32 Тогда // "Операция <"

		Текст = "
		|Если %1 < %2 Тогда
		|
		|Иначе
		|
		|КонецЕсли;"; 
		
		Возврат УстановитьЗначение("Операция <", Текст, 2);

	ИначеЕсли opCode = 33 Тогда // "Операция = (сравнение)"

		Текст = "
		|Если %1 = %2 Тогда
		|
		|Иначе
		|
		|КонецЕсли;"; 
		
		Возврат УстановитьЗначение("Операция =", Текст, 2);

	ИначеЕсли opCode = 34 Тогда // "Операция <>"

		Текст = "
		|Если %1 <> %2 Тогда
		|
		|Иначе
		|
		|КонецЕсли;"; 
		
		Возврат УстановитьЗначение("Операция <>", Текст, 2);

	ИначеЕсли opCode = 35 Тогда // "Операция >"

		Текст = "
		|Если %1 > %2 Тогда
		|
		|Иначе
		|
		|КонецЕсли;"; 
		
		Возврат УстановитьЗначение("Операция >", Текст, 2);

	ИначеЕсли opCode = 36 Тогда // "Операция <"

		Текст = "
		|Если %1 < %2 Тогда
		|
		|Иначе
		|
		|КонецЕсли;"; 
		
		Возврат УстановитьЗначение("Операция <", Текст, 2);

	ИначеЕсли opCode = 37 Тогда // "Операция >="

		Текст = "
		|Если %1 >= %2 Тогда
		|
		|Иначе
		|
		|КонецЕсли;"; 
		
		Возврат УстановитьЗначение("Операция >=", Текст, 2);

	ИначеЕсли opCode = 38 Тогда // "Операция <="

		Текст = "
		|Если %1 <= %2 Тогда
		|
		|Иначе
		|
		|КонецЕсли;"; 
		
		Возврат УстановитьЗначение("Операция <=", Текст, 2);

	ИначеЕсли opCode = 39 Тогда // "Переход на заданный шаг"
		
		Объект.CurrentPoin = Operand + 1; 

		Возврат "Переход на заданный шаг";
		
	ИначеЕсли opCode = 40 Тогда // "Переход, если Ложь"  
		
		Возврат "Переход, если Ложь";
		
	ИначеЕсли opCode = 41 Тогда // "Переход, если Истина"
		
		Возврат "Переход, если Истина";
		
	ИначеЕсли opCode = 42 Тогда // "Перейти"  
		
		Если ЗначениеЗаполнено(Элементы.ПФ.Заголовок) Тогда  
			
			Попытка
				
				Возврат "Перейти - " + (ПолучитьЛокальнуюМетку(Operand) + 1);     
				
			Исключение
				
			КонецПопытки;
			
		Иначе 
			
			Запрос = Новый Запрос("ВЫБРАТЬ
			|	Labels.Значение КАК Значение
			|ИЗ
			|	РегистрСведений.Labels КАК Labels
			|ГДЕ
			|	Labels.Строка = &Строка
			|	И Labels.Проект = &Проект
			|	И Labels.Файл = &Файл");
			
			Запрос.УстановитьПараметр("Файл",	 Объект.Файл);
			Запрос.УстановитьПараметр("Строка",	 Operand);
			Запрос.УстановитьПараметр("Проект",	 Объект.Проект);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
				
				Возврат "Перейти - " + Выборка.Значение; 
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли opCode = 43 Тогда // "Инкремент"   

		Возврат УстановитьЗначение("Инкремент", "%1 = %1 + %1;", 1);
		
	ИначеЕсли opCode = 44 Тогда // "Попытка"

		Возврат УстановитьЗначение("Попытка", "Попытка", 0);
		
	ИначеЕсли opCode = 45 Тогда // "Завершение блока (Процедура, Функция, Попытка) без ошибки (Возврат или Исключение)"
		
		Возврат "Завершение блока (Процедура, Функция, Попытка) без ошибки (Возврат или Исключение)";
		
	ИначеЕсли opCode = 46 Тогда // "КонецПопытки (конец обработки ошибки)"

		Возврат УстановитьЗначение("КонецПопытки", "КонецПопытки;", 0);
		
	ИначеЕсли opCode = 47 Тогда // "ВызватьИсключение"

		Возврат УстановитьЗначение("ВызватьИсключение", "ВызватьИсключение %1;", 1);
		
	ИначеЕсли opCode = 48 Тогда // "Создать на стеке временных переменных временную переменную"    
		
		Возврат "Создать на стеке временных переменных временную переменную";
		
	ИначеЕсли opCode = 49 Тогда // "Загрузить в стек временную переменную из стека временных переменных"
		
		Возврат "Загрузить в стек временную переменную из стека временных переменных";
		
	ИначеЕсли opCode = 50 Тогда // "Удалить из стека временных переменных временную переменную"
		
		Возврат "Удалить из стека временных переменных временную переменную";
		
	ИначеЕсли opCode = 51 Тогда // "Новый"
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	Memory.Значение КАК Значение
		|ИЗ
		|	РегистрСведений.Memory КАК Memory
		|ГДЕ
		|	Memory.Адрес = &Адрес
		|	И Memory.Проект = &Проект
		|	И Memory.Файл = &Файл");
		
		Запрос.УстановитьПараметр("Файл",	 Объект.Файл);
		Запрос.УстановитьПараметр("Адрес",	 Адрес);
		Запрос.УстановитьПараметр("Проект",	 Объект.Проект);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда   
			
			НовыйОбъект = СокрЛП(Выборка.Значение.Получить());

			Переменные = "";
			
			Количество = Объект.Count;  
			
			Для А = 1 По Количество Цикл
				
				Переменные = Переменные + "%" + А + ", ";
				
			КонецЦикла;
			
			Переменные = Лев(Переменные, СтрДлина(Переменные) - 2);
			
			Объект.Count = -1;
			
			Возврат УстановитьЗначение("Новый", ?(Количество > 0, "Новый " + НовыйОбъект + "(" + Переменные + ")", "Новый " + НовыйОбъект), Количество);

		КонецЕсли; 
		
	ИначеЕсли opCode = 52 Тогда // "Выполнить"

		Возврат УстановитьЗначение("Выполнить", "Выполнить(%1);", 1);
		
	ИначеЕсли opCode = 53 Тогда // "СтрДлина"  

		Возврат УстановитьЗначение("СтрДлина", "СтрДлина(%1)", 1);
		
	ИначеЕсли opCode = 54 Тогда // "СокрЛ"

		Возврат УстановитьЗначение("СокрЛ", "СокрЛ(%1)", 1);
		
	ИначеЕсли opCode = 55 Тогда // "СокрП"

		Возврат УстановитьЗначение("СокрП", "СокрП(%1)", 1);
		
	ИначеЕсли opCode = 56 Тогда // "СокрЛП"

		Возврат УстановитьЗначение("СокрЛП", "СокрЛП(%1)", 1);
		
	ИначеЕсли opCode = 57 Тогда // "Лев" 

		Возврат УстановитьЗначение("Лев", "Лев(%1, %2)", 2);
		
	ИначеЕсли opCode = 58 Тогда // "Прав"

		Возврат УстановитьЗначение("Прав", "Прав(%1, %2)", 2);
		
	ИначеЕсли opCode = 59 Тогда // "Сред"

		Возврат УстановитьЗначение("Сред", "Сред(%1, %2, %3)", 3);
		
	ИначеЕсли opCode = 60 Тогда // "Найти" 

		Возврат УстановитьЗначение("Найти", "Найти(%1, %2)", 2);
		
	ИначеЕсли opCode = 61 Тогда // "Врег"

		Возврат УстановитьЗначение("Врег", "Врег(%1)", 1);
		
	ИначеЕсли opCode = 62 Тогда // "Нрег"

		Возврат УстановитьЗначение("Нрег", "Нрег(%1)", 1);
		
	ИначеЕсли opCode = 63 Тогда // "Символ"

		Возврат УстановитьЗначение("Символ", "Символ(%1)", 1);
		
	ИначеЕсли opCode = 64 Тогда // "КодСимвола"

		Возврат УстановитьЗначение("КодСимвола", "КодСимвола(%1, %2)", 2);
		
	ИначеЕсли opCode = 65 Тогда // "ПустаяСтрока"

		Возврат УстановитьЗначение("ПустаяСтрока", "ПустаяСтрока(%1)", 1);
		
	ИначеЕсли opCode = 66 Тогда // "Цел"

		Возврат УстановитьЗначение("Цел", "Цел(%1)", 1);
		
	ИначеЕсли opCode = 67 Тогда // "Окр"    

		Возврат УстановитьЗначение("Окр", "Окр(%1, %2)", 2);
		
	ИначеЕсли opCode = 68 Тогда // "Окр"

		Возврат УстановитьЗначение("Окр", "Окр(%1, %2, %3)", 3);
		
	ИначеЕсли opCode = 69 Тогда // "Булево"

		Возврат УстановитьЗначение("Булево", "Булево(%1)", 1);
		
	ИначеЕсли opCode = 70 Тогда // "Число"

		Возврат УстановитьЗначение("Число", "Число(%1)", 1);
		
	ИначеЕсли opCode = 71 Тогда // "Строка"

		Возврат УстановитьЗначение("Строка", "Строка(%1)", 1);
		
	ИначеЕсли opCode = 72 Тогда // "Дата"

		Возврат УстановитьЗначение("Дата", "Дата(%1)", 1);
		
	ИначеЕсли opCode = 73 Тогда // "Дата"

		Возврат УстановитьЗначение("Дата", "Дата(%1, %2, %3)", 3);
		
	ИначеЕсли opCode = 74 Тогда // "Дата"

		Возврат УстановитьЗначение("Дата", "Дата(%1, %2, %3, %4, %5, %6)", 6);

	ИначеЕсли opCode = 75 Тогда // "ДобавитьМесяц"

		Возврат УстановитьЗначение("ДобавитьМесяц", "ДобавитьМесяц(%1, %2)", 2);
		
	ИначеЕсли opCode = 76 Тогда // "НачалоМесяца"

		Возврат УстановитьЗначение("НачалоМесяца", "НачалоМесяца(%1)", 1);
		
	ИначеЕсли opCode = 77 Тогда // "КонецМесяца"

		Возврат УстановитьЗначение("КонецМесяца", "КонецМесяца(%1)", 1);
		
	ИначеЕсли opCode = 78 Тогда // "НачалоКвартала"

		Возврат УстановитьЗначение("НачалоКвартала", "НачалоКвартала(%1)", 1);
		
	ИначеЕсли opCode = 79 Тогда // "КонецКвартала"

		Возврат УстановитьЗначение("КонецКвартала", "КонецКвартала(%1)", 1);
		
	ИначеЕсли opCode = 80 Тогда // "НачалоГода"

		Возврат УстановитьЗначение("НачалоГода", "НачалоГода(%1)", 1);
		
	ИначеЕсли opCode = 81 Тогда // "КонецГода"

		Возврат УстановитьЗначение("КонецГода", "КонецГода(%1)", 1);
		
	ИначеЕсли opCode = 82 Тогда // "Год"

		Возврат УстановитьЗначение("Год", "Год(%1)", 1);
		
	ИначеЕсли opCode = 83 Тогда // "Месяц"

		Возврат УстановитьЗначение("Месяц", "Месяц(%1)", 1);
		
	ИначеЕсли opCode = 84 Тогда // "День"

		Возврат УстановитьЗначение("День", "День(%1)", 1);
		
	ИначеЕсли opCode = 85 Тогда // "Час"

		Возврат УстановитьЗначение("Час", "Час(%1)", 1);
		
	ИначеЕсли opCode = 86 Тогда // "Минута"

		Возврат УстановитьЗначение("Минута", "Минута(%1)", 1);
		
	ИначеЕсли opCode = 87 Тогда // "Секунда"

		Возврат УстановитьЗначение("Секунда", "Секунда(%1)", 1);
	
	ИначеЕсли opCode = 88 Тогда // "ДеньГода"

		Возврат УстановитьЗначение("ДеньГода", "ДеньГода(%1)", 1);
		
	ИначеЕсли opCode = 89 Тогда // "НеделяГода"

		Возврат УстановитьЗначение("НеделяГода", "НеделяГода(%1)", 1);
		
	ИначеЕсли opCode = 90 Тогда // "ДеньНедели"

		Возврат УстановитьЗначение("ДеньНедели", "ДеньНедели(%1)", 1);
		
	ИначеЕсли opCode = 91 Тогда // "НачалоНедели"

		Возврат УстановитьЗначение("НачалоНедели", "НачалоНедели(%1)", 1);
		
	ИначеЕсли opCode = 92 Тогда // "КонецНедели"

		Возврат УстановитьЗначение("КонецНедели", "КонецНедели(%1)", 1);
		
	ИначеЕсли opCode = 93 Тогда // "НачалоДня"

		Возврат УстановитьЗначение("НачалоДня", "НачалоДня(%1)", 1);
		
	ИначеЕсли opCode = 94 Тогда // "КонецДня"

		Возврат УстановитьЗначение("КонецДня", "КонецДня(%1)", 1);
		
	ИначеЕсли opCode = 95 Тогда // "НачалоЧаса"

		Возврат УстановитьЗначение("НачалоЧаса", "НачалоЧаса(%1)", 1);
		
	ИначеЕсли opCode = 96 Тогда // "КонецЧаса"

		Возврат УстановитьЗначение("КонецЧаса", "КонецЧаса(%1)", 1);
		
	ИначеЕсли opCode = 97 Тогда // "НачалоМинуты"

		Возврат УстановитьЗначение("НачалоМинуты", "НачалоМинуты(%1)", 1);
		
	ИначеЕсли opCode = 98 Тогда // "КонецМинуты"

		Возврат УстановитьЗначение("КонецМинуты", "КонецМинуты(%1)", 1);
		
	ИначеЕсли opCode = 99 Тогда // "ТекущаяДата"    

		Возврат УстановитьЗначение("ТекущаяДата", "ТекущаяДата()", 0);
		
	ИначеЕсли opCode = 100 Тогда // "СтрЗаменить"

		Возврат УстановитьЗначение("СтрЗаменить", "СтрЗаменить(%1, %2, %3)", 3);
		
	ИначеЕсли opCode = 101 Тогда // "СтрЧислоСтрок"

		Возврат УстановитьЗначение("СтрЧислоСтрок", "СтрЧислоСтрок(%1)", 1);
	
	ИначеЕсли opCode = 102 Тогда // "СтрПолучитьСтроку"

		Возврат УстановитьЗначение("СтрПолучитьСтроку", "СтрПолучитьСтроку(%1, %2)", 2);
		
	ИначеЕсли opCode = 103 Тогда // "Мин"

		Возврат УстановитьЗначение("Мин", "Мин(%1, %2)", 2);
		
	ИначеЕсли opCode = 104 Тогда // "Макс"

		Возврат УстановитьЗначение("Макс", "Макс(%1, %2)", 2);
		
	ИначеЕсли opCode = 105 Тогда // "СтрЧислоВхождений"

		Возврат УстановитьЗначение("СтрЧислоВхождений", "СтрЧислоВхождений(%1, %2)", 2);
	
	ИначеЕсли opCode = 106 Тогда // "ОписаниеОшибки"

		Возврат УстановитьЗначение("ОписаниеОшибки", "ОписаниеОшибки()", 0);
		
	ИначеЕсли opCode = 107 Тогда // "ТипЗнч"

		Возврат УстановитьЗначение("ТипЗнч", "ТипЗнч(%1)", 1);
		
	ИначеЕсли opCode = 108 Тогда // "Тип"

		Возврат УстановитьЗначение("Тип", "Тип(%1)", 1);
		
	ИначеЕсли opCode = 109 Тогда // "Вычислить"

		Возврат УстановитьЗначение("Вычислить", "Вычислить(%1)", 1);
	
	ИначеЕсли opCode = 110 Тогда // "Формат"

		Возврат УстановитьЗначение("Формат", "Формат(%1, %2)", 2);
		
	ИначеЕсли opCode = 111 Тогда // "Новый"

		Возврат УстановитьЗначение("Новый", "Новый", 0);

	ИначеЕсли opCode = 112 Тогда // "ACos"

		Возврат УстановитьЗначение("ACos", "ACos(%1)", 1);
		
	ИначеЕсли opCode = 113 Тогда // "ASin"

		Возврат УстановитьЗначение("ASin", "ASin(%1)", 1);
		
	ИначеЕсли opCode = 114 Тогда // "ATan"

		Возврат УстановитьЗначение("ATan", "ATan(%1)", 1);
		
	ИначеЕсли opCode = 115 Тогда // "Cos"

		Возврат УстановитьЗначение("Cos", "Cos(%1)", 1);
	
	ИначеЕсли opCode = 116 Тогда // "Exp"     

		Возврат УстановитьЗначение("Exp", "Exp(%1)", 1);
		
	ИначеЕсли opCode = 117 Тогда // "Log"

		Возврат УстановитьЗначение("Log", "Log(%1)", 1);
		
	ИначеЕсли opCode = 118 Тогда // "Log10"

		Возврат УстановитьЗначение("Log10", "Log10(%1)", 1);
	
	ИначеЕсли opCode = 119 Тогда // "Pow"

		Возврат УстановитьЗначение("Pow", "Pow(%1, %2)", 2);
		
	ИначеЕсли opCode = 120 Тогда // "Sin"

		Возврат УстановитьЗначение("Sin", "Sin(%1)", 1);
		
	ИначеЕсли opCode = 121 Тогда // "Sqrt"

		Возврат УстановитьЗначение("Sqrt", "Sqrt(%1)", 1);
		
	ИначеЕсли opCode = 122 Тогда // "Tan"

		Возврат УстановитьЗначение("Tan", "Tan(%1)", 1);
		
	ИначеЕсли opCode = 123 Тогда // "ДобавитьОбработчик"
		
		Переменные = "";
		
		Количество = Объект.Count;  
		
		Для А = 1 По Количество Цикл
			
			Переменные = Переменные + "%" + А + ", ";
			
		КонецЦикла;
		
		Переменные = Лев(Переменные, СтрДлина(Переменные) - 2);
		
		Объект.Count = -1;

		Возврат УстановитьЗначение("ДобавитьОбработчик", "ДобавитьОбработчик " + Переменные + ";", Количество);
		
	ИначеЕсли opCode = 124 Тогда // "ДобавитьОбработчик"
		
		Переменные = "";
		
		Количество = Объект.Count;  
		
		Для А = 1 По Количество Цикл
			
			Переменные = Переменные + "%" + А + ", ";
			
		КонецЦикла;
		
		Переменные = Лев(Переменные, СтрДлина(Переменные) - 2);
		
		Объект.Count = -1;

		Возврат УстановитьЗначение("ДобавитьОбработчик", "ДобавитьОбработчик " + Переменные + ";", Количество);
		
	ИначеЕсли opCode = 125 Тогда // "УдалитьОбработчик"
		
		Переменные = "";
		
		Количество = Объект.Count;  
		
		Для А = 1 По Количество Цикл
			
			Переменные = Переменные + "%" + А + ", ";
			
		КонецЦикла;
		
		Переменные = Лев(Переменные, СтрДлина(Переменные) - 2);
		
		Объект.Count = -1;

		Возврат УстановитьЗначение("УдалитьОбработчик", "УдалитьОбработчик " + Переменные + ";", Количество);
	
	ИначеЕсли opCode = 126 Тогда // "УдалитьОбработчик"
		
		Переменные = "";
		
		Количество = Объект.Count;  
		
		Для А = 1 По Количество Цикл
			
			Переменные = Переменные + "%" + А + ", ";
			
		КонецЦикла;
		
		Переменные = Лев(Переменные, СтрДлина(Переменные) - 2);
		
		Объект.Count = -1;

		Возврат УстановитьЗначение("УдалитьОбработчик", "УдалитьОбработчик " + Переменные + ";", Количество);
	
	ИначеЕсли opCode = 127 Тогда // "ТРег"

		Возврат УстановитьЗначение("ТРег", "ТРег(%1)", 1);
	
	ИначеЕсли opCode = 128 Тогда // "ИнформацияОбОшибке"

		Возврат УстановитьЗначение("ИнформацияОбОшибке", "ИнформацияОбОшибке();", 0);
		
	КонецЕсли;  
	
	Возврат "";	
	
КонецФункции
//*****************************************************************************************
&НаСервере
Процедура УстановитьШаг(ТекущийШаг = Неопределено) 
	
	Decompile.УстановитьЗначениеНастроек(Объект.Проект, Объект.Файл, Перечисления.Значение.CurrentPoin, ?(ТекущийШаг = Неопределено, Объект.CurrentPoin, ТекущийШаг)); 
	
КонецПроцедуры
//*****************************************************************************************
&НаКлиенте
Процедура Next(Команда)  
	
	Если Объект.CurrentPoin = -1 Тогда 
		
		Объект.CurrentPoin = Объект.EntryPoint + 1;		
		
	КонецЕсли;
	
	Элементы.Code.ТекущаяСтрока = NextНаСервере(); 
	
	Объект.CurrentPoin = Объект.CurrentPoin + 1; 
	
	Элементы.Code.ТекущиеДанные.Описание = ПолучитьОписание(Элементы.Code.ТекущиеДанные.opCode, Элементы.Code.ТекущиеДанные.Operand, Элементы.Code.ТекущиеДанные.Адрес);
	
	УстановитьШаг(); 
	
	ОбновитьДанные();
	
КонецПроцедуры
//*****************************************************************************************
&НаСервере
Процедура ClearНаСервере()
	
	Decompile.УстановитьЗначениеНастроек(Объект.Проект, Объект.Файл, Перечисления.Значение.CodeText,	 "");
	Decompile.УстановитьЗначениеНастроек(Объект.Проект, Объект.Файл, Перечисления.Значение.CurrentPoin,	 -1);  
	
КонецПроцедуры
//*****************************************************************************************
&НаКлиенте
Процедура Clear(Команда)   
	
	ClearНаСервере();
	
	ОбновитьДанные();
	
КонецПроцедуры
////*****************************************************************************************  
&НаСервере
Функция ПолучитьМетку(Operand)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Labels.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.Labels КАК Labels
	|ГДЕ
	|	Labels.Строка = &Строка
	|	И Labels.Проект = &Проект
	|	И Labels.Файл = &Файл");
	
	Запрос.УстановитьПараметр("Файл",	 Объект.Файл);
	Запрос.УстановитьПараметр("Строка",	 Operand);
	Запрос.УстановитьПараметр("Проект",	 Объект.Проект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Возврат Число(СтрЗаменить(Выборка.Значение, Символы.НПП, "")); 
		
	КонецЕсли;
	
	Возврат -1;
	
КонецФункции
//*****************************************************************************************  
&НаСервере
Функция ПолучитьЛокальнуюМетку(Operand)
	
	Адрес = "-1";
	
	Для А = 0 По Элементы.ПроцедурыФункции.СписокВыбора.Количество() - 1 Цикл 
		
		Если СокрЛП(Элементы.ПроцедурыФункции.СписокВыбора.Получить(А).Представление) = СокрЛП(Элементы.ПФ.Заголовок) Тогда 
			
			Адрес = Элементы.ПроцедурыФункции.СписокВыбора.Получить(А).Значение;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ЗначенияПроцедурФункций.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.ЗначенияПроцедурФункций КАК ЗначенияПроцедурФункций
	|ГДЕ
	|	ЗначенияПроцедурФункций.Тип = ЗНАЧЕНИЕ(Перечисление.ТипЗначенияПроцедурыФункции.Lbl)
	|	И ЗначенияПроцедурФункций.Адрес = &Адрес
	|	И ЗначенияПроцедурФункций.Номер = &Номер
	|	И ЗначенияПроцедурФункций.Проект = &Проект
	|	И ЗначенияПроцедурФункций.Файл = &Файл");
	
	Запрос.УстановитьПараметр("Файл",	 Объект.Файл);
	Запрос.УстановитьПараметр("Адрес",	 Адрес);
	Запрос.УстановитьПараметр("Номер",	 Operand);
	Запрос.УстановитьПараметр("Проект",	 Объект.Проект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		
		Возврат Число(Выборка.Значение);
		
	КонецЕсли;  
	
	Возврат -1;
	
КонецФункции
//*****************************************************************************************  
&НаКлиенте  
Функция ПоследняяСтрокаБулево()

	Текст = ВРег(СокрЛП(СтрПолучитьСтроку(Объект.Text, СтрЧислоСтрок(Объект.Text))));
	
	Возврат Текст = "ИСТИНА" ИЛИ Текст = "ЛОЖЬ" ИЛИ Текст = "TRUE" ИЛИ Текст = "FALSE";

КонецФункции
//*****************************************************************************************  
&НаКлиенте  
Функция УдалитьПоследнююСтроку()
	
	Текст = "";
	
	Для А = 0 По СтрЧислоСтрок(Объект.Text) - 1 Цикл
		
		Текст = Текст + СокрЛП(СтрПолучитьСтроку(Объект.Text, А)) + Символы.ПС;
		
	КонецЦикла;  
	
	Объект.Text = "";
	
	Объект.Text = СокрЛП(Текст) + ?(СтрДлина(Текст) > 0, Символы.ПС, "") + Символы.ПС; 
	
КонецФункции
//*****************************************************************************************  
&НаКлиенте
Процедура CodeВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка) 
	
	СтандартнаяОбработка = Ложь;  
	
	Если Элементы.Code.ТекущиеДанные.opCode = 42 Тогда 
		
		Если ЗначениеЗаполнено(Элементы.ПФ.Заголовок) Тогда                                             
			
			Адрес = ПолучитьЛокальнуюМетку(Элементы.Code.ТекущиеДанные.Operand) + 1;
			
			УстановитьШаг(Адрес);
			
			Объект.CurrentPoin = Адрес; 
	
		Иначе 
			
			Адрес = ПолучитьМетку(Элементы.Code.ТекущиеДанные.Operand) + 1;
			
			УстановитьШаг(Адрес);

			Объект.CurrentPoin = Адрес; 
			
		КонецЕсли; 
		
		Если ПоследняяСтрокаБулево() Тогда 
			
			УдалитьПоследнююСтроку();
			
		КонецЕсли;
		
	ИначеЕсли 
		Элементы.Code.ТекущиеДанные.opCode = 39 
		ИЛИ Элементы.Code.ТекущиеДанные.opCode = 40 
		ИЛИ Элементы.Code.ТекущиеДанные.opCode = 41 
		Тогда
		
		Адрес = Число(СтрЗаменить(Элементы.Code.ТекущиеДанные.Operand, Символы.НПП, "")) + 1;
		
		УстановитьШаг(Адрес);
		
		Объект.CurrentPoin = Адрес; 
		
		Если ПоследняяСтрокаБулево() Тогда 
			
			УдалитьПоследнююСтроку();
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьДанные();
	
КонецПроцедуры
//*****************************************************************************************  
&НаСервере
Процедура ЗагрузитьДанныеФункцииПроцедуры(Наименование)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ПроцедурыФункции.Адрес КАК Адрес,
	|	ПроцедурыФункции.Наименование КАК Наименование,
	|	ПроцедурыФункции.ЭтоФункция КАК ЭтоФункция,
	|	ПроцедурыФункции.ЭтоПроцедура КАК ЭтоПроцедура,
	|	ПроцедурыФункции.Экспортная КАК Экспортная,
	|	ПроцедурыФункции.Параметры КАК Параметры
	|ИЗ
	|	РегистрСведений.ПроцедурыФункции КАК ПроцедурыФункции
	|ГДЕ
	|	ПроцедурыФункции.Проект = &Проект
	|	И ПроцедурыФункции.Файл = &Файл
	|	И ПроцедурыФункции.Наименование = &Наименование
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование
	|АВТОУПОРЯДОЧИВАНИЕ");
	
	Запрос.УстановитьПараметр("Файл",			 Объект.Файл);
	Запрос.УстановитьПараметр("Проект",			 Объект.Проект);
	Запрос.УстановитьПараметр("Наименование",	 Наименование);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПараметрыПроцедурыФункции = Выборка.Параметры;  
		
		ЭтоФункция	 = Выборка.ЭтоФункция;
		Экспортная	 = Выборка.Экспортная;
		ЭтоПроцедура = Выборка.ЭтоПроцедура; 
		
		Объект.CurrentPoin = Число(Выборка.Адрес) + 1; 
		
	КонецЦикла; 
	
КонецПроцедуры
//*****************************************************************************************  
&НаКлиенте
Процедура ПроцедурыФункцииОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УстановитьШаг(Число(ВыбранноеЗначение) + 1);   
	
	Для А = 0 По Элементы.ПроцедурыФункции.СписокВыбора.Количество() - 1 Цикл 
		
		Если Элементы.ПроцедурыФункции.СписокВыбора.Получить(А).Значение = ВыбранноеЗначение Тогда 
			
			Элементы.ПФ.Заголовок = Элементы.ПроцедурыФункции.СписокВыбора.Получить(А).Представление; 
			
			ЗагрузитьДанныеФункцииПроцедуры(Элементы.ПФ.Заголовок);
			
		КонецЕсли;
		
	КонецЦикла; 

	ОбновитьДанные();
	
КонецПроцедуры
//*****************************************************************************************  
&НаКлиенте
Процедура ПроцедурыФункцииОчистка(Элемент, СтандартнаяОбработка)
	
	УстановитьШаг(-1);
	
	ОбновитьДанные();
	
КонецПроцедуры
//*****************************************************************************************  
&НаКлиенте
Процедура ПроцедурыФункцииПриИзменении(Элемент)
	
	Объект.Text = "";
	
КонецПроцедуры
//*****************************************************************************************  
&НаСервере
Процедура ПроектПриИзмененииНаСервере()
	
	Элементы.Файл.СписокВыбора.Очистить();
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ПроектыФайлы.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Проекты.Файлы КАК ПроектыФайлы");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл     
		
		Элементы.Файл.СписокВыбора.Добавить(Выборка.Наименование, Выборка.Наименование);
		
	КонецЦикла;
	
	ОбновитьДанные();
	
КонецПроцедуры
//*****************************************************************************************  
&НаКлиенте
Процедура ПроектПриИзменении(Элемент)   
	
	ПроектПриИзмененииНаСервере();
	
КонецПроцедуры
//*****************************************************************************************  
&НаКлиенте
Процедура ФайлПриИзменении(Элемент)
	
	ОбновитьДанные();
	
КонецПроцедуры
//*****************************************************************************************  
